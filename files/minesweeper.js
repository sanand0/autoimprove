const conversation = [
  {
    "role": "system",
    "content": "Generate a single page HTML app in a single Markdown code block."
  },
  {
    "role": "user",
    "content": "create a advanced minesweeper game"
  },
  {
    "role": "assistant",
    "content": "# Advanced Minesweeper (Single HTML File)\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Advanced Minesweeper</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background-color: #121212;\n            color: #e0e0e0;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 20px;\n        }\n        \n        h1 {\n            color: #4CAF50;\n            margin-bottom: 10px;\n            text-shadow: 0 0 5px rgba(76, 175, 80, 0.5);\n        }\n        \n        .game-container {\n            background-color: #1e1e1e;\n            border-radius: 10px;\n            padding: 20px;\n            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n            max-width: 800px;\n            width: 100%;\n        }\n        \n        .controls {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 20px;\n            align-items: center;\n        }\n        \n        .difficulty {\n            display: flex;\n            gap: 10px;\n        }\n        \n        button {\n            background-color: #333;\n            color: #fff;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 5px;\n            cursor: pointer;\n            transition: all 0.2s;\n        }\n        \n        button:hover {\n            background-color: #4CAF50;\n            transform: scale(1.05);\n        }\n        \n        button.active {\n            background-color: #4CAF50;\n            font-weight: bold;\n        }\n        \n        .stats {\n            display: flex;\n            gap: 20px;\n            font-size: 18px;\n        }\n        \n        .stat {\n            background-color: #333;\n            padding: 8px 16px;\n            border-radius: 5px;\n            min-width: 80px;\n            text-align: center;\n        }\n        \n        .board {\n            display: grid;\n            grid-template-columns: repeat(var(--cols), 30px);\n            grid-template-rows: repeat(var(--rows), 30px);\n            gap: 2px;\n            margin: 0 auto;\n        }\n        \n        .cell {\n            width: 30px;\n            height: 30px;\n            background-color: #333;\n            border-radius: 3px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-weight: bold;\n            cursor: pointer;\n            transition: all 0.1s;\n            user-select: none;\n        }\n        \n        .cell:hover {\n            background-color: #444;\n        }\n        \n        .cell.revealed {\n            background-color: #252525;\n            cursor: default;\n        }\n        \n        .cell.flagged {\n            background-color: #4a2e2e;\n        }\n        \n        .cell.mine {\n            background-color: #f44336;\n        }\n        \n        .cell.mine-revealed {\n            background-color: #ff0000;\n        }\n        \n        .number-1 { color: #2196F3; }\n        .number-2 { color: #4CAF50; }\n        .number-3 { color: #f44336; }\n        .number-4 { color: #3F51B5; }\n        .number-5 { color: #795548; }\n        .number-6 { color: #607D8B; }\n        .number-7 { color: #212121; }\n        .number-8 { color: #9C27B0; }\n        \n        .modal {\n            display: none;\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0, 0, 0, 0.8);\n            justify-content: center;\n            align-items: center;\n            z-index: 100;\n        }\n        \n        .modal-content {\n            background-color: #1e1e1e;\n            padding: 30px;\n            border-radius: 10px;\n            text-align: center;\n            max-width: 400px;\n            width: 90%;\n        }\n        \n        .modal h2 {\n            color: #4CAF50;\n            margin-top: 0;\n        }\n        \n        .modal button {\n            margin-top: 20px;\n        }\n        \n        .hint-btn {\n            background-color: #FF9800;\n        }\n        \n        .hint-btn:hover {\n            background-color: #FF5722;\n        }\n        \n        .theme-toggle {\n            background-color: #9C27B0;\n        }\n        \n        @media (max-width: 600px) {\n            .cell {\n                width: 25px;\n                height: 25px;\n                font-size: 12px;\n            }\n            \n            .controls {\n                flex-direction: column;\n                gap: 10px;\n            }\n            \n            .stats {\n                width: 100%;\n                justify-content: space-between;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h1>Advanced Minesweeper</h1>\n    \n    <div class=\"game-container\">\n        <div class=\"controls\">\n            <div class=\"difficulty\">\n                <button id=\"easy-btn\" class=\"active\">Easy</button>\n                <button id=\"medium-btn\">Medium</button>\n                <button id=\"hard-btn\">Hard</button>\n                <button id=\"custom-btn\">Custom</button>\n            </div>\n            \n            <button id=\"theme-toggle\" class=\"theme-toggle\">🌙 Dark Mode</button>\n        </div>\n        \n        <div class=\"controls\">\n            <div class=\"stats\">\n                <div class=\"stat\">Mines: <span id=\"mines-count\">10</span></div>\n                <div class=\"stat\">Flags: <span id=\"flags-count\">0</span></div>\n                <div class=\"stat\">Time: <span id=\"time\">0</span></div>\n            </div>\n            \n            <button id=\"new-game-btn\">New Game</button>\n            <button id=\"hint-btn\" class=\"hint-btn\">Hint</button>\n        </div>\n        \n        <div id=\"board\" class=\"board\"></div>\n    </div>\n    \n    <div id=\"game-over-modal\" class=\"modal\">\n        <div class=\"modal-content\">\n            <h2 id=\"game-result\">You Won!</h2>\n            <p id=\"game-stats\">Time: 0 seconds</p>\n            <button id=\"play-again-btn\">Play Again</button>\n        </div>\n    </div>\n    \n    <div id=\"custom-modal\" class=\"modal\">\n        <div class=\"modal-content\">\n            <h2>Custom Game</h2>\n            <div style=\"margin-bottom: 20px;\">\n                <label for=\"custom-rows\">Rows (5-30):</label>\n                <input type=\"number\" id=\"custom-rows\" min=\"5\" max=\"30\" value=\"10\" style=\"width: 60px; margin-left: 10px;\">\n            </div>\n            <div style=\"margin-bottom: 20px;\">\n                <label for=\"custom-cols\">Columns (5-30):</label>\n                <input type=\"number\" id=\"custom-cols\" min=\"5\" max=\"30\" value=\"10\" style=\"width: 60px; margin-left: 10px;\">\n            </div>\n            <div style=\"margin-bottom: 20px;\">\n                <label for=\"custom-mines\">Mines (10-50%):</label>\n                <input type=\"number\" id=\"custom-mines\" min=\"3\" max=\"300\" value=\"10\" style=\"width: 60px; margin-left: 10px;\">\n            </div>\n            <button id=\"start-custom-btn\">Start Game</button>\n            <button id=\"cancel-custom-btn\" style=\"margin-left: 10px;\">Cancel</button>\n        </div>\n    </div>\n    \n    <script>\n        // Game state\n        let board = [];\n        let rows = 10;\n        let cols = 10;\n        let minesCount = 10;\n        let flagsCount = 0;\n        let revealedCount = 0;\n        let gameOver = false;\n        let firstClick = true;\n        let timer = 0;\n        let timerInterval = null;\n        let hintUsed = false;\n        let darkMode = true;\n        \n        // DOM elements\n        const boardElement = document.getElementById('board');\n        const minesCountElement = document.getElementById('mines-count');\n        const flagsCountElement = document.getElementById('flags-count');\n        const timeElement = document.getElementById('time');\n        const gameOverModal = document.getElementById('game-over-modal');\n        const gameResultElement = document.getElementById('game-result');\n        const gameStatsElement = document.getElementById('game-stats');\n        const playAgainBtn = document.getElementById('play-again-btn');\n        const newGameBtn = document.getElementById('new-game-btn');\n        const hintBtn = document.getElementById('hint-btn');\n        const themeToggleBtn = document.getElementById('theme-toggle');\n        const customModal = document.getElementById('custom-modal');\n        \n        // Difficulty buttons\n        const easyBtn = document.getElementById('easy-btn');\n        const mediumBtn = document.getElementById('medium-btn');\n        const hardBtn = document.getElementById('hard-btn');\n        const customBtn = document.getElementById('custom-btn');\n        const startCustomBtn = document.getElementById('start-custom-btn');\n        const cancelCustomBtn = document.getElementById('cancel-custom-btn');\n        \n        // Initialize game\n        function initGame() {\n            // Clear existing board\n            boardElement.innerHTML = '';\n            board = [];\n            flagsCount = 0;\n            revealedCount = 0;\n            gameOver = false;\n            firstClick = true;\n            hintUsed = false;\n            \n            // Stop timer if running\n            if (timerInterval) {\n                clearInterval(timerInterval);\n                timerInterval = null;\n            }\n            timer = 0;\n            updateTimeDisplay();\n            \n            // Update mines count display\n            minesCountElement.textContent = minesCount;\n            flagsCountElement.textContent = flagsCount;\n            \n            // Set CSS variables for grid size\n            boardElement.style.setProperty('--rows', rows);\n            boardElement.style.setProperty('--cols', cols);\n            \n            // Create board\n            for (let r = 0; r < rows; r++) {\n                board[r] = [];\n                for (let c = 0; c < cols; c++) {\n                    board[r][c] = {\n                        isMine: false,\n                        isRevealed: false,\n                        isFlagged: false,\n                        adjacentMines: 0\n                    };\n                    \n                    const cell = document.createElement('div');\n                    cell.className = 'cell';\n                    cell.dataset.row = r;\n                    cell.dataset.col = c;\n                    \n                    // Event listeners\n                    cell.addEventListener('click', () => handleLeftClick(r, c));\n                    cell.addEventListener('contextmenu', (e) => {\n                        e.preventDefault();\n                        handleRightClick(r, c);\n                    });\n                    \n                    boardElement.appendChild(cell);\n                }\n            }\n        }\n        \n        // Place mines after first click (to ensure first click is always safe)\n        function placeMines(firstRow, firstCol) {\n            let minesPlaced = 0;\n            \n            while (minesPlaced < minesCount) {\n                const r = Math.floor(Math.random() * rows);\n                const c = Math.floor(Math.random() * cols);\n                \n                // Don't place mine on first click or where a mine already exists\n                if ((r !== firstRow || c !== firstCol) && !board[r][c].isMine) {\n                    board[r][c].isMine = true;\n                    minesPlaced++;\n                }\n            }\n            \n            // Calculate adjacent mines for each cell\n            for (let r = 0; r < rows; r++) {\n                for (let c = 0; c < cols; c++) {\n                    if (!board[r][c].isMine) {\n                        board[r][c].adjacentMines = countAdjacentMines(r, c);\n                    }\n                }\n            }\n            \n            // Start timer after mines are placed\n            startTimer();\n        }\n        \n        // Count adjacent mines for a cell\n        function countAdjacentMines(r, c) {\n            let count = 0;\n            \n            // Check all 8 surrounding cells\n            for (let dr = -1; dr <= 1; dr++) {\n                for (let dc = -1; dc <= 1; dc++) {\n                    if (dr === 0 && dc === 0) continue; // Skip current cell\n                    \n                    const nr = r + dr;\n                    const nc = c + dc;\n                    \n                    // Check if neighbor is within bounds and is a mine\n                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && board[nr][nc].isMine) {\n                        count++;\n                    }\n                }\n            }\n            \n            return count;\n        }\n        \n        // Handle left click\n        function handleLeftClick(r, c) {\n            if (gameOver || board[r][c].isFlagged) return;\n            \n            // On first click, place mines (avoiding this cell)\n            if (firstClick) {\n                placeMines(r, c);\n                firstClick = false;\n            }\n            \n            // If clicked on a mine\n            if (board[r][c].isMine) {\n                revealMines();\n                gameOver = true;\n                endGame(false);\n                return;\n            }\n            \n            // Reveal cell if not already revealed\n            if (!board[r][c].isRevealed) {\n                revealCell(r, c);\n                \n                // Check for win condition\n                checkWin();\n            } else {\n                // If clicking on a revealed number, try chord action\n                chordCells(r, c);\n            }\n        }\n        \n        // Handle right click (flag)\n        function handleRightClick(r, c) {\n            if (gameOver || board[r][c].isRevealed) return;\n            \n            const cell = getCellElement(r, c);\n            \n            if (!board[r][c].isFlagged) {\n                board[r][c].isFlagged = true;\n                cell.textContent = '🚩';\n                flagsCount++;\n            } else {\n                board[r][c].isFlagged = false;\n                cell.textContent = '';\n                flagsCount--;\n            }\n            \n            flagsCountElement.textContent = flagsCount;\n        }\n        \n        // Reveal a cell\n        function revealCell(r, c) {\n            if (board[r][c].isRevealed || board[r][c].isFlagged) return;\n            \n            const cell = getCellElement(r, c);\n            board[r][c].isRevealed = true;\n            cell.classList.add('revealed');\n            revealedCount++;\n            \n            if (board[r][c].adjacentMines > 0) {\n                cell.textContent = board[r][c].adjacentMines;\n                cell.classList.add(`number-${board[r][c].adjacentMines}`);\n            } else {\n                // If no adjacent mines, reveal all adjacent cells recursively\n                for (let dr = -1; dr <= 1; dr++) {\n                    for (let dc = -1; dc <= 1; dc++) {\n                        if (dr === 0 && dc === 0) continue; // Skip current cell\n                        \n                        const nr = r + dr;\n                        const nc = c + dc;\n                        \n                        // Check if neighbor is within bounds\n                        if (nr >= 0 && nr < rows && nc >= 0 && nc < cols) {\n                            revealCell(nr, nc);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Chord action (when clicking on a revealed number)\n        function chordCells(r, c) {\n            const cell = board[r][c];\n            if (!cell.isRevealed || cell.adjacentMines === 0) return;\n            \n            // Count adjacent flags\n            let adjacentFlags = 0;\n            for (let dr = -1; dr <= 1; dr++) {\n                for (let dc = -1; dc <= 1; dc++) {\n                    if (dr === 0 && dc === 0) continue;\n                    \n                    const nr = r + dr;\n                    const nc = c + dc;\n                    \n                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && board[nr][nc].isFlagged) {\n                        adjacentFlags++;\n                    }\n                }\n            }\n            \n            // If flags match adjacent mines, reveal all unflagged adjacent cells\n            if (adjacentFlags === cell.adjacentMines) {\n                for (let dr = -1; dr <= 1; dr++) {\n                    for (let dc = -1; dc <= 1; dc++) {\n                        if (dr === 0 && dc === 0) continue;\n                        \n                        const nr = r + dr;\n                        const nc = c + dc;\n                        \n                        if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && \n                            !board[nr][nc].isRevealed && !board[nr][nc].isFlagged) {\n                            \n                            if (board[nr][nc].isMine) {\n                                revealMines();\n                                gameOver = true;\n                                endGame(false);\n                                return;\n                            }\n                            \n                            revealCell(nr, nc);\n                        }\n                    }\n                }\n                \n                // Check for win condition after chording\n                checkWin();\n            }\n        }\n        \n        // Reveal all mines (when game is lost)\n        function revealMines() {\n            for (let r = 0; r < rows; r++) {\n                for (let c = 0; c < cols; c++) {\n                    if (board[r][c].isMine) {\n                        const cell = getCellElement(r, c);\n                        cell.textContent = '💣';\n                        cell.classList.add(board[r][c].isFlagged ? 'flagged' : 'mine-revealed');\n                    }\n                }\n            }\n        }\n        \n        // Check if player has won\n        function checkWin() {\n            if (revealedCount === (rows * cols - minesCount)) {\n                gameOver = true;\n                endGame(true);\n            }\n        }\n        \n        // End game (win or lose)\n        function endGame(isWin) {\n            // Stop timer\n            if (timerInterval) {\n                clearInterval(timerInterval);\n                timerInterval = null;\n            }\n            \n            // Flag all mines if won\n            if (isWin) {\n                for (let r = 0; r < rows; r++) {\n                    for (let c = 0; c < cols; c++) {\n                        if (board[r][c].isMine && !board[r][c].isFlagged) {\n                            board[r][c].isFlagged = true;\n                            const cell = getCellElement(r, c);\n                            cell.textContent = '🚩';\n                        }\n                    }\n                }\n            }\n            \n            // Show game over modal\n            gameResultElement.textContent = isWin ? 'You Won! 🎉' : 'Game Over! 💥';\n            gameStatsElement.textContent = `Time: ${timer} seconds | Mines: ${minesCount} | Size: ${rows}x${cols}`;\n            gameOverModal.style.display = 'flex';\n        }\n        \n        // Start timer\n        function startTimer() {\n            timer = 0;\n            updateTimeDisplay();\n            timerInterval = setInterval(() => {\n                timer++;\n                updateTimeDisplay();\n            }, 1000);\n        }\n        \n        // Update time display\n        function updateTimeDisplay() {\n            timeElement.textContent = timer;\n        }\n        \n        // Get cell DOM element\n        function getCellElement(r, c) {\n            return document.querySelector(`.cell[data-row=\"${r}\"][data-col=\"${c}\"]`);\n        }\n        \n        // Set difficulty\n        function setDifficulty(difficulty) {\n            switch (difficulty) {\n                case 'easy':\n                    rows = 10;\n                    cols = 10;\n                    minesCount = 10;\n                    break;\n                case 'medium':\n                    rows = 16;\n                    cols = 16;\n                    minesCount = 40;\n                    break;\n                case 'hard':\n                    rows = 16;\n                    cols = 30;\n                    minesCount = 99;\n                    break;\n                case 'custom':\n                    // Custom settings handled separately\n                    return;\n            }\n            \n            // Update active button\n            easyBtn.classList.remove('active');\n            mediumBtn.classList.remove('active');\n            hardBtn.classList.remove('active');\n            customBtn.classList.remove('active');\n            \n            document.getElementById(`${difficulty}-btn`).classList.add('active');\n            \n            initGame();\n        }\n        \n        // Show hint (reveal a safe cell)\n        function showHint() {\n            if (gameOver || firstClick || hintUsed) return;\n            \n            // Find all unrevealed, unflagged, non-mine cells\n            const safeCells = [];\n            for (let r = 0; r < rows; r++) {\n                for (let c = 0; c < cols; c++) {\n                    if (!board[r][c].isRevealed && !board[r][c].isFlagged && !board[r][c].isMine) {\n                        safeCells.push({ r, c });\n                    }\n                }\n            }\n            \n            if (safeCells.length > 0) {\n                // Pick a random safe cell\n                const { r, c } = safeCells[Math.floor(Math.random() * safeCells.length)];\n                \n                // Temporarily highlight the cell\n                const cell = getCellElement(r, c);\n                cell.style.backgroundColor = '#FF9800';\n                cell.style.boxShadow = '0 0 10px #FF9800';\n                \n                setTimeout(() => {\n                    cell.style.backgroundColor = '';\n                    cell.style.boxShadow = '';\n                }, 1000);\n                \n                hintUsed = true;\n                hintBtn.disabled = true;\n            }\n        }\n        \n        // Toggle theme\n        function toggleTheme() {\n            darkMode = !darkMode;\n            \n            if (darkMode) {\n                document.body.style.backgroundColor = '#121212';\n                document.body.style.color = '#e0e0e0';\n                document.querySelector('.game-container').style.backgroundColor = '#1e1e1e';\n                themeToggleBtn.textContent = '🌙 Dark Mode';\n            } else {\n                document.body.style.backgroundColor = '#f5f5f5';\n                document.body.style.color = '#333';\n                document.querySelector('.game-container').style.backgroundColor = '#fff';\n                themeToggleBtn.textContent = '☀️ Light Mode';\n            }\n        }\n        \n        // Event listeners\n        easyBtn.addEventListener('click', () => setDifficulty('easy'));\n        mediumBtn.addEventListener('click', () => setDifficulty('medium'));\n        hardBtn.addEventListener('click', () => setDifficulty('hard'));\n        customBtn.addEventListener('click', () => {\n            customModal.style.display = 'flex';\n            document.getElementById('custom-rows').value = rows;\n            document.getElementById('custom-cols').value = cols;\n            document.getElementById('custom-mines').value = minesCount;\n        });\n        \n        newGameBtn.addEventListener('click', initGame);\n        playAgainBtn.addEventListener('click', () => {\n            gameOverModal.style.display = 'none';\n            initGame();\n        });\n        \n        hintBtn.addEventListener('click', showHint);\n        themeToggleBtn.addEventListener('click', toggleTheme);\n        \n        startCustomBtn.addEventListener('click', () => {\n            const customRows = parseInt(document.getElementById('custom-rows').value);\n            const customCols = parseInt(document.getElementById('custom-cols').value);\n            const customMines = parseInt(document.getElementById('custom-mines').value);\n            \n            // Validate inputs\n            if (customRows < 5 || customRows > 30 || \n                customCols < 5 || customCols > 30 || \n                customMines < 3 || customMines > Math.floor(customRows * customCols * 0.5)) {\n                alert('Invalid settings! Please check your inputs.');\n                return;\n            }\n            \n            rows = customRows;\n            cols = customCols;\n            minesCount = customMines;\n            \n            customModal.style.display = 'none';\n            \n            // Update active button\n            easyBtn.classList.remove('active');\n            mediumBtn.classList.remove('active');\n            hardBtn.classList.remove('active');\n            customBtn.classList.add('active');\n            \n            initGame();\n        });\n        \n        cancelCustomBtn.addEventListener('click', () => {\n            customModal.style.display = 'none';\n        });\n        \n        // Initialize game on load\n        initGame();\n    </script>\n</body>\n</html>\n```\n\nThis advanced Minesweeper game includes:\n\n1. **Multiple Difficulty Levels**: Easy (10x10 with 10 mines), Medium (16x16 with 40 mines), Hard (16x30 with 99 mines)\n2. **Custom Game Mode**: Set your own board size and mine count\n3. **Game Features**:\n   - Left click to reveal cells\n   - Right click to place/remove flags\n   - Chord action (clicking on revealed numbers with correct flag count)\n   - Hint system (highlights a safe cell)\n   - Timer and mine counter\n4. **Visual Enhancements**:\n   - Color-coded numbers\n   - Dark/light mode toggle\n   - Animated hints\n   - Responsive design for mobile\n5. **Game States**:\n   - Win/lose detection\n   - Game over modal with stats\n   - First click always safe\n\nThe entire game is contained in a single HTML file with embedded CSS and JavaScript."
  },
  {
    "role": "user",
    "content": "Improve this app and use animations inside it "
  },
  {
    "role": "assistant",
    "content": "# Advanced Minesweeper with Animations (Single HTML File)\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Advanced Minesweeper</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --text-color: #e0e0e0;\n            --container-bg: #1e1e1e;\n            --button-bg: #333;\n            --button-hover: #4CAF50;\n            --mine-color: #f44336;\n            --flag-color: #4a2e2e;\n            --revealed-color: #252525;\n            --highlight-color: #FF9800;\n            --shadow-color: rgba(0, 0, 0, 0.5);\n        }\n\n        .light-mode {\n            --bg-color: #f5f5f5;\n            --text-color: #333;\n            --container-bg: #fff;\n            --button-bg: #e0e0e0;\n            --button-hover: #4CAF50;\n            --mine-color: #f44336;\n            --flag-color: #ffcdd2;\n            --revealed-color: #f5f5f5;\n            --highlight-color: #FF9800;\n            --shadow-color: rgba(0, 0, 0, 0.1);\n        }\n\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 20px;\n            transition: background-color 0.5s ease, color 0.5s ease;\n            min-height: 100vh;\n        }\n        \n        h1 {\n            color: #4CAF50;\n            margin-bottom: 10px;\n            text-shadow: 0 0 5px rgba(76, 175, 80, 0.5);\n            animation: fadeIn 1s ease-in-out;\n        }\n        \n        .game-container {\n            background-color: var(--container-bg);\n            border-radius: 10px;\n            padding: 20px;\n            box-shadow: 0 0 20px var(--shadow-color);\n            max-width: 800px;\n            width: 100%;\n            transition: background-color 0.5s ease, box-shadow 0.5s ease;\n            animation: slideUp 0.5s ease-out;\n        }\n        \n        .controls {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 20px;\n            align-items: center;\n            flex-wrap: wrap;\n            gap: 10px;\n        }\n        \n        .difficulty {\n            display: flex;\n            gap: 10px;\n            flex-wrap: wrap;\n        }\n        \n        button {\n            background-color: var(--button-bg);\n            color: var(--text-color);\n            border: none;\n            padding: 8px 16px;\n            border-radius: 5px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            position: relative;\n            overflow: hidden;\n        }\n        \n        button::after {\n            content: '';\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 5px;\n            height: 5px;\n            background: rgba(255, 255, 255, 0.5);\n            opacity: 0;\n            border-radius: 100%;\n            transform: scale(1, 1) translate(-50%);\n            transform-origin: 50% 50%;\n        }\n        \n        button:focus:not(:active)::after {\n            animation: ripple 0.6s ease-out;\n        }\n        \n        button:hover {\n            background-color: var(--button-hover);\n            transform: scale(1.05);\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n        }\n        \n        button.active {\n            background-color: var(--button-hover);\n            font-weight: bold;\n            transform: scale(1.05);\n        }\n        \n        .stats {\n            display: flex;\n            gap: 20px;\n            font-size: 18px;\n            flex-wrap: wrap;\n            justify-content: center;\n        }\n        \n        .stat {\n            background-color: var(--button-bg);\n            padding: 8px 16px;\n            border-radius: 5px;\n            min-width: 80px;\n            text-align: center;\n            transition: all 0.3s ease;\n            animation: fadeIn 0.5s ease-in;\n        }\n        \n        .stat span {\n            font-weight: bold;\n            color: #4CAF50;\n        }\n        \n        .board {\n            display: grid;\n            grid-template-columns: repeat(var(--cols), 30px);\n            grid-template-rows: repeat(var(--rows), 30px);\n            gap: 2px;\n            margin: 0 auto;\n            perspective: 1000px;\n        }\n        \n        .cell {\n            width: 30px;\n            height: 30px;\n            background-color: var(--button-bg);\n            border-radius: 3px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-weight: bold;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            user-select: none;\n            position: relative;\n            transform-style: preserve-3d;\n        }\n        \n        .cell::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background: rgba(255, 255, 255, 0.1);\n            opacity: 0;\n            transition: opacity 0.3s;\n        }\n        \n        .cell:hover {\n            background-color: var(--button-hover);\n        }\n        \n        .cell:hover::before {\n            opacity: 1;\n        }\n        \n        .cell.revealed {\n            background-color: var(--revealed-color);\n            cursor: default;\n            animation: flipIn 0.3s ease-out;\n            transform: rotateY(180deg);\n        }\n        \n        .cell.flagged {\n            background-color: var(--flag-color);\n            animation: pulse 0.5s ease;\n        }\n        \n        .cell.mine {\n            background-color: var(--mine-color);\n        }\n        \n        .cell.mine-revealed {\n            background-color: var(--mine-color);\n            animation: shake 0.5s ease;\n        }\n        \n        .number-1 { color: #2196F3; }\n        .number-2 { color: #4CAF50; }\n        .number-3 { color: #f44336; }\n        .number-4 { color: #3F51B5; }\n        .number-5 { color: #795548; }\n        .number-6 { color: #607D8B; }\n        .number-7 { color: #212121; }\n        .number-8 { color: #9C27B0; }\n        \n        .modal {\n            display: none;\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0, 0, 0, 0.8);\n            justify-content: center;\n            align-items: center;\n            z-index: 100;\n            animation: fadeIn 0.3s ease-out;\n        }\n        \n        .modal-content {\n            background-color: var(--container-bg);\n            padding: 30px;\n            border-radius: 10px;\n            text-align: center;\n            max-width: 400px;\n            width: 90%;\n            transform: scale(0.9);\n            opacity: 0;\n            animation: modalAppear 0.3s forwards 0.1s;\n            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);\n            transition: background-color 0.5s ease;\n        }\n        \n        .modal h2 {\n            color: #4CAF50;\n            margin-top: 0;\n            animation: fadeIn 0.5s ease;\n        }\n        \n        .modal button {\n            margin-top: 20px;\n        }\n        \n        .hint-btn {\n            background-color: #FF9800;\n        }\n        \n        .hint-btn:hover {\n            background-color: #FF5722;\n        }\n        \n        .theme-toggle {\n            background-color: #9C27B0;\n        }\n        \n        /* Animations */\n        @keyframes fadeIn {\n            from { opacity: 0; }\n            to { opacity: 1; }\n        }\n        \n        @keyframes slideUp {\n            from { \n                opacity: 0;\n                transform: translateY(20px);\n            }\n            to { \n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n        \n        @keyframes flipIn {\n            0% {\n                transform: rotateY(0deg);\n                background-color: var(--button-bg);\n            }\n            100% {\n                transform: rotateY(180deg);\n                background-color: var(--revealed-color);\n            }\n        }\n        \n        @keyframes pulse {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.1); }\n            100% { transform: scale(1); }\n        }\n        \n        @keyframes shake {\n            0%, 100% { transform: translateX(0); }\n            10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }\n            20%, 40%, 60%, 80% { transform: translateX(2px); }\n        }\n        \n        @keyframes ripple {\n            0% {\n                transform: scale(0, 0);\n                opacity: 0.5;\n            }\n            100% {\n                transform: scale(20, 20);\n                opacity: 0;\n            }\n        }\n        \n        @keyframes modalAppear {\n            100% {\n                transform: scale(1);\n                opacity: 1;\n            }\n        }\n        \n        @keyframes highlight {\n            0% { \n                background-color: var(--highlight-color);\n                box-shadow: 0 0 10px var(--highlight-color);\n            }\n            100% { \n                background-color: var(--revealed-color);\n                box-shadow: none;\n            }\n        }\n        \n        @keyframes explode {\n            0% {\n                transform: scale(1);\n                opacity: 1;\n            }\n            100% {\n                transform: scale(5);\n                opacity: 0;\n            }\n        }\n        \n        /* Particle effect for win */\n        .confetti {\n            position: absolute;\n            width: 10px;\n            height: 10px;\n            background-color: #f00;\n            border-radius: 50%;\n            animation: confettiFall 3s ease-out forwards;\n        }\n        \n        @keyframes confettiFall {\n            0% { \n                transform: translateY(-100px) rotate(0deg);\n                opacity: 1;\n            }\n            100% { \n                transform: translateY(100vh) rotate(360deg);\n                opacity: 0;\n            }\n        }\n        \n        @media (max-width: 600px) {\n            .cell {\n                width: 25px;\n                height: 25px;\n                font-size: 12px;\n            }\n            \n            .controls {\n                flex-direction: column;\n                gap: 10px;\n            }\n            \n            .stats {\n                width: 100%;\n                justify-content: space-between;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h1>Advanced Minesweeper</h1>\n    \n    <div class=\"game-container\">\n        <div class=\"controls\">\n            <div class=\"difficulty\">\n                <button id=\"easy-btn\" class=\"active\">Easy</button>\n                <button id=\"medium-btn\">Medium</button>\n                <button id=\"hard-btn\">Hard</button>\n                <button id=\"custom-btn\">Custom</button>\n            </div>\n            \n            <button id=\"theme-toggle\" class=\"theme-toggle\">🌙 Dark Mode</button>\n        </div>\n        \n        <div class=\"controls\">\n            <div class=\"stats\">\n                <div class=\"stat\">Mines: <span id=\"mines-count\">10</span></div>\n                <div class=\"stat\">Flags: <span id=\"flags-count\">0</span></div>\n                <div class=\"stat\">Time: <span id=\"time\">0</span></div>\n            </div>\n            \n            <button id=\"new-game-btn\">New Game</button>\n            <button id=\"hint-btn\" class=\"hint-btn\">Hint</button>\n        </div>\n        \n        <div id=\"board\" class=\"board\"></div>\n    </div>\n    \n    <div id=\"game-over-modal\" class=\"modal\">\n        <div class=\"modal-content\">\n            <h2 id=\"game-result\">You Won!</h2>\n            <p id=\"game-stats\">Time: 0 seconds</p>\n            <button id=\"play-again-btn\">Play Again</button>\n        </div>\n    </div>\n    \n    <div id=\"custom-modal\" class=\"modal\">\n        <div class=\"modal-content\">\n            <h2>Custom Game</h2>\n            <div style=\"margin-bottom: 20px;\">\n                <label for=\"custom-rows\">Rows (5-30):</label>\n                <input type=\"number\" id=\"custom-rows\" min=\"5\" max=\"30\" value=\"10\" style=\"width: 60px; margin-left: 10px;\">\n            </div>\n            <div style=\"margin-bottom: 20px;\">\n                <label for=\"custom-cols\">Columns (5-30):</label>\n                <input type=\"number\" id=\"custom-cols\" min=\"5\" max=\"30\" value=\"10\" style=\"width: 60px; margin-left: 10px;\">\n            </div>\n            <div style=\"margin-bottom: 20px;\">\n                <label for=\"custom-mines\">Mines (10-50%):</label>\n                <input type=\"number\" id=\"custom-mines\" min=\"3\" max=\"300\" value=\"10\" style=\"width: 60px; margin-left: 10px;\">\n            </div>\n            <button id=\"start-custom-btn\">Start Game</button>\n            <button id=\"cancel-custom-btn\" style=\"margin-left: 10px;\">Cancel</button>\n        </div>\n    </div>\n    \n    <script>\n        // Game state\n        let board = [];\n        let rows = 10;\n        let cols = 10;\n        let minesCount = 10;\n        let flagsCount = 0;\n        let revealedCount = 0;\n        let gameOver = false;\n        let firstClick = true;\n        let timer = 0;\n        let timerInterval = null;\n        let hintUsed = false;\n        let darkMode = true;\n        \n        // DOM elements\n        const boardElement = document.getElementById('board');\n        const minesCountElement = document.getElementById('mines-count');\n        const flagsCountElement = document.getElementById('flags-count');\n        const timeElement = document.getElementById('time');\n        const gameOverModal = document.getElementById('game-over-modal');\n        const gameResultElement = document.getElementById('game-result');\n        const gameStatsElement = document.getElementById('game-stats');\n        const playAgainBtn = document.getElementById('play-again-btn');\n        const newGameBtn = document.getElementById('new-game-btn');\n        const hintBtn = document.getElementById('hint-btn');\n        const themeToggleBtn = document.getElementById('theme-toggle');\n        const customModal = document.getElementById('custom-modal');\n        \n        // Difficulty buttons\n        const easyBtn = document.getElementById('easy-btn');\n        const mediumBtn = document.getElementById('medium-btn');\n        const hardBtn = document.getElementById('hard-btn');\n        const customBtn = document.getElementById('custom-btn');\n        const startCustomBtn = document.getElementById('start-custom-btn');\n        const cancelCustomBtn = document.getElementById('cancel-custom-btn');\n        \n        // Initialize game\n        function initGame() {\n            // Clear existing board\n            boardElement.innerHTML = '';\n            board = [];\n            flagsCount = 0;\n            revealedCount = 0;\n            gameOver = false;\n            firstClick = true;\n            hintUsed = false;\n            \n            // Reset hint button\n            hintBtn.disabled = false;\n            hintBtn.style.opacity = '1';\n            \n            // Stop timer if running\n            if (timerInterval) {\n                clearInterval(timerInterval);\n                timerInterval = null;\n            }\n            timer = 0;\n            updateTimeDisplay();\n            \n            // Update mines count display\n            minesCountElement.textContent = minesCount;\n            flagsCountElement.textContent = flagsCount;\n            \n            // Set CSS variables for grid size\n            boardElement.style.setProperty('--rows', rows);\n            boardElement.style.setProperty('--cols', cols);\n            \n            // Create board\n            for (let r = 0; r < rows; r++) {\n                board[r] = [];\n                for (let c = 0; c < cols; c++) {\n                    board[r][c] = {\n                        isMine: false,\n                        isRevealed: false,\n                        isFlagged: false,\n                        adjacentMines: 0\n                    };\n                    \n                    const cell = document.createElement('div');\n                    cell.className = 'cell';\n                    cell.dataset.row = r;\n                    cell.dataset.col = c;\n                    \n                    // Event listeners\n                    cell.addEventListener('click', () => handleLeftClick(r, c));\n                    cell.addEventListener('contextmenu', (e) => {\n                        e.preventDefault();\n                        handleRightClick(r, c);\n                    });\n                    \n                    // Add touch support for mobile\n                    cell.addEventListener('touchstart', (e) => {\n                        e.preventDefault();\n                        this.touchTimer = setTimeout(() => {\n                            handleRightClick(r, c);\n                        }, 500);\n                    }, {passive: false});\n                    \n                    cell.addEventListener('touchend', (e) => {\n                        e.preventDefault();\n                        clearTimeout(this.touchTimer);\n                    }, {passive: false});\n                    \n                    boardElement.appendChild(cell);\n                }\n            }\n        }\n        \n        // Place mines after first click (to ensure first click is always safe)\n        function placeMines(firstRow, firstCol) {\n            let minesPlaced = 0;\n            \n            while (minesPlaced < minesCount) {\n                const r = Math.floor(Math.random() * rows);\n                const c = Math.floor(Math.random() * cols);\n                \n                // Don't place mine on first click or where a mine already exists\n                if ((r !== firstRow || c !== firstCol) && !board[r][c].isMine) {\n                    board[r][c].isMine = true;\n                    minesPlaced++;\n                }\n            }\n            \n            // Calculate adjacent mines for each cell\n            for (let r = 0; r < rows; r++) {\n                for (let c = 0; c < cols; c++) {\n                    if (!board[r][c].isMine) {\n                        board[r][c].adjacentMines = countAdjacentMines(r, c);\n                    }\n                }\n            }\n            \n            // Start timer after mines are placed\n            startTimer();\n        }\n        \n        // Count adjacent mines for a cell\n        function countAdjacentMines(r, c) {\n            let count = 0;\n            \n            // Check all 8 surrounding cells\n            for (let dr = -1; dr <= 1; dr++) {\n                for (let dc = -1; dc <= 1; dc++) {\n                    if (dr === 0 && dc === 0) continue; // Skip current cell\n                    \n                    const nr = r + dr;\n                    const nc = c + dc;\n                    \n                    // Check if neighbor is within bounds and is a mine\n                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && board[nr][nc].isMine) {\n                        count++;\n                    }\n                }\n            }\n            \n            return count;\n        }\n        \n        // Handle left click\n        function handleLeftClick(r, c) {\n            if (gameOver || board[r][c].isFlagged) return;\n            \n            // On first click, place mines (avoiding this cell)\n            if (firstClick) {\n                placeMines(r, c);\n                firstClick = false;\n            }\n            \n            // If clicked on a mine\n            if (board[r][c].isMine) {\n                revealMines(r, c);\n                gameOver = true;\n                endGame(false);\n                return;\n            }\n            \n            // Reveal cell if not already revealed\n            if (!board[r][c].isRevealed) {\n                revealCell(r, c);\n                \n                // Check for win condition\n                checkWin();\n            } else {\n                // If clicking on a revealed number, try chord action\n                chordCells(r, c);\n            }\n        }\n        \n        // Handle right click (flag)\n        function handleRightClick(r, c) {\n            if (gameOver || board[r][c].isRevealed) return;\n            \n            const cell = getCellElement(r, c);\n            \n            if (!board[r][c].isFlagged) {\n                board[r][c].isFlagged = true;\n                cell.textContent = '🚩';\n                flagsCount++;\n                cell.classList.add('flagged');\n            } else {\n                board[r][c].isFlagged = false;\n                cell.textContent = '';\n                flagsCount--;\n                cell.classList.remove('flagged');\n            }\n            \n            flagsCountElement.textContent = flagsCount;\n        }\n        \n        // Reveal a cell\n        function revealCell(r, c) {\n            if (board[r][c].isRevealed || board[r][c].isFlagged) return;\n            \n            const cell = getCellElement(r, c);\n            board[r][c].isRevealed = true;\n            cell.classList.add('revealed');\n            revealedCount++;\n            \n            if (board[r][c].adjacentMines > 0) {\n                cell.textContent = board[r][c].adjacentMines;\n                cell.classList.add(`number-${board[r][c].adjacentMines}`);\n            } else {\n                // If no adjacent mines, reveal all adjacent cells recursively\n                for (let dr = -1; dr <= 1; dr++) {\n                    for (let dc = -1; dc <= 1; dc++) {\n                        if (dr === 0 && dc === 0) continue; // Skip current cell\n                        \n                        const nr = r + dr;\n                        const nc = c + dc;\n                        \n                        // Check if neighbor is within bounds\n                        if (nr >= 0 && nr < rows && nc >= 0 && nc < cols) {\n                            revealCell(nr, nc);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Chord action (when clicking on a revealed number)\n        function chordCells(r, c) {\n            const cell = board[r][c];\n            if (!cell.isRevealed || cell.adjacentMines === 0) return;\n            \n            // Count adjacent flags\n            let adjacentFlags = 0;\n            for (let dr = -1; dr <= 1; dr++) {\n                for (let dc = -1; dc <= 1; dc++) {\n                    if (dr === 0 && dc === 0) continue;\n                    \n                    const nr = r + dr;\n                    const nc = c + dc;\n                    \n                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && board[nr][nc].isFlagged) {\n                        adjacentFlags++;\n                    }\n                }\n            }\n            \n            // If flags match adjacent mines, reveal all unflagged adjacent cells\n            if (adjacentFlags === cell.adjacentMines) {\n                for (let dr = -1; dr <= 1; dr++) {\n                    for (let dc = -1; dc <= 1; dc++) {\n                        if (dr === 0 && dc === 0) continue;\n                        \n                        const nr = r + dr;\n                        const nc = c + dc;\n                        \n                        if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && \n                            !board[nr][nc].isRevealed && !board[nr][nc].isFlagged) {\n                            \n                            if (board[nr][nc].isMine) {\n                                revealMines(nr, nc);\n                                gameOver = true;\n                                endGame(false);\n                                return;\n                            }\n                            \n                            revealCell(nr, nc);\n                        }\n                    }\n                }\n                \n                // Check for win condition after chording\n                checkWin();\n            }\n        }\n        \n        // Reveal all mines (when game is lost)\n        function revealMines(clickedR, clickedC) {\n            for (let r = 0; r < rows; r++) {\n                for (let c = 0; c < cols; c++) {\n                    if (board[r][c].isMine) {\n                        const cell = getCellElement(r, c);\n                        cell.textContent = '💣';\n                        \n                        if (r === clickedR && c === clickedC) {\n                            cell.classList.add('mine-revealed');\n                            setTimeout(() => {\n                                cell.style.animation = 'explode 0.5s forwards';\n                            }, 100);\n                        } else {\n                            cell.classList.add(board[r][c].isFlagged ? 'flagged' : 'mine-revealed');\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Check if player has won\n        function checkWin() {\n            if (revealedCount === (rows * cols - minesCount)) {\n                gameOver = true;\n                endGame(true);\n                createConfetti();\n            }\n        }\n        \n        // End game (win or lose)\n        function endGame(isWin) {\n            // Stop timer\n            if (timerInterval) {\n                clearInterval(timerInterval);\n                timerInterval = null;\n            }\n            \n            if (isWin) {\n                // Flag all mines if won\n                for (let r = 0; r < rows; r++) {\n                    for (let c = 0; c < cols; c++) {\n                        if (board[r][c].isMine && !board[r][c].isFlagged) {\n                            board[r][c].isFlagged = true;\n                            const cell = getCellElement(r, c);\n                            cell.textContent = '🚩';\n                            cell.classList.add('flagged');\n                        }\n                    }\n                }\n                \n                // Disable hint button completely\n                hintBtn.disabled = true;\n                hintBtn.style.opacity = '0.5';\n            }\n            \n            // Show game over modal\n            gameResultElement.textContent = isWin ? 'You Won! 🎉' : 'Game Over! 💥';\n            gameStatsElement.textContent = `Time: ${timer} seconds | Mines: ${minesCount} | Size: ${rows}x${cols}`;\n            gameOverModal.style.display = 'flex';\n        }\n        \n        // Start timer\n        function startTimer() {\n            timer = 0;\n            updateTimeDisplay();\n            timerInterval = setInterval(() => {\n                timer++;\n                updateTimeDisplay();\n            }, 1000);\n        }\n        \n        // Update time display\n        function updateTimeDisplay() {\n            timeElement.textContent = timer;\n        }\n        \n        // Get cell DOM element\n        function getCellElement(r, c) {\n            return document.querySelector(`.cell[data-row=\"${r}\"][data-col=\"${c}\"]`);\n        }\n        \n        // Set difficulty\n        function setDifficulty(difficulty) {\n            switch (difficulty) {\n                case 'easy':\n                    rows = 10;\n                    cols = 10;\n                    minesCount = 10;\n                    break;\n                case 'medium':\n                    rows = 16;\n                    cols = 16;\n                    minesCount = 40;\n                    break;\n                case 'hard':\n                    rows = 16;\n                    cols = 30;\n                    minesCount = 99;\n                    break;\n                case 'custom':\n                    // Custom settings handled separately\n                    return;\n            }\n            \n            // Update active button\n            easyBtn.classList.remove('active');\n            mediumBtn.classList.remove('active');\n            hardBtn.classList.remove('active');\n            customBtn.classList.remove('active');\n            \n            document.getElementById(`${difficulty}-btn`).classList.add('active');\n            \n            initGame();\n        }\n        \n        // Show hint (reveal a safe cell)\n        function showHint() {\n            if (gameOver || firstClick || hintUsed) return;\n            \n            // Find all unrevealed, unflagged, non-mine cells\n            const safeCells = [];\n            for (let r = 0; r < rows; r++) {\n                for (let c = 0; c < cols; c++) {\n                    if (!board[r][c].isRevealed && !board[r][c].isFlagged && !board[r][c].isMine) {\n                        safeCells.push({ r, c });\n                    }\n                }\n            }\n            \n            if (safeCells.length > 0) {\n                // Pick a random safe cell\n                const { r, c } = safeCells[Math.floor(Math.random() * safeCells.length)];\n                const cell = getCellElement(r, c);\n                \n                // Animation for hint\n                cell.style.animation = 'highlight 1.5s ease-in-out';\n                \n                setTimeout(() => {\n                    cell.style.animation = '';\n                }, 1500);\n                \n                hintUsed = true;\n                hintBtn.disabled = true;\n                hintBtn.style.opacity = '0.5';\n            }\n        }\n        \n        // Create confetti effect for win\n        function createConfetti() {\n            const colors = ['#f00', '#0f0', '#00f', '#ff0', '#f0f', '#0ff'];\n            const container = document.querySelector('.game-container');\n            \n            for (let i = 0; i < 100; i++) {\n                const confetti = document.createElement('div');\n                confetti.className = 'confetti';\n                confetti.style.left = Math.random() * 100 + '%';\n                confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\n                confetti.style.animationDelay = Math.random() * 2 + 's';\n                container.appendChild(confetti);\n                \n                // Remove after animation\n                setTimeout(() => {\n                    confetti.remove();\n                }, 3000);\n            }\n        }\n        \n        // Toggle theme\n        function toggleTheme() {\n            darkMode = !darkMode;\n            \n            if (darkMode) {\n                document.body.classList.remove('light-mode');\n                themeToggleBtn.textContent = '🌙 Dark Mode';\n            } else {\n                document.body.classList.add('light-mode');\n                themeToggleBtn.textContent = '☀️ Light Mode';\n            }\n        }\n        \n        // Event listeners\n        easyBtn.addEventListener('click', () => setDifficulty('easy'));\n        mediumBtn.addEventListener('click', () => setDifficulty('medium'));\n        hardBtn.addEventListener('click', () => setDifficulty('hard'));\n        customBtn.addEventListener('click', () => {\n            customModal.style.display = 'flex';\n            document.getElementById('custom-rows').value = rows;\n            document.getElementById('custom-cols').value = cols;\n            document.getElementById('custom-mines').value = minesCount;\n        });\n        \n        newGameBtn.addEventListener('click', initGame);\n        playAgainBtn.addEventListener('click', () => {\n            gameOverModal.style.display = 'none';\n            initGame();\n        });\n        \n        hintBtn.addEventListener('click', showHint);\n        themeToggleBtn.addEventListener('click', toggleTheme);\n        \n        startCustomBtn.addEventListener('click', () => {\n            const customRows = parseInt(document.getElementById('custom-rows').value);\n            const customCols = parseInt(document.getElementById('custom-cols').value);\n            const customMines = parseInt(document.getElementById('custom-mines').value);\n            \n            // Validate inputs\n            if (customRows < 5 || customRows > 30 || \n                customCols < 5 || customCols > 30 || \n                customMines < 3 || customMines > Math.floor(customRows * customCols * 0.5)) {\n                alert('Invalid settings! Please check your inputs.');\n                return;\n            }\n            \n            rows = customRows;\n            cols = customCols;\n            minesCount = customMines;\n            \n            customModal.style.display = 'none';\n            \n            // Update active button\n            easyBtn.classList.remove('active');\n            mediumBtn.classList.remove('active');\n            hardBtn.classList.remove('active');\n            customBtn.classList.add('active');\n            \n            initGame();\n        });\n        \n        cancelCustomBtn.addEventListener('click', () => {\n            customModal.style.display = 'none';\n        });\n        \n        // Initialize game on load\n        initGame();\n    </script>\n</body>\n</html>\n```\n\nThis enhanced Minesweeper game now includes these animation improvements:\n\n1. **Smooth Transitions**:\n   - Smooth color transitions between light/dark modes\n   - Animated button hovers with ripple effects\n   - Fade-in animations for UI elements\n\n2. **Cell Animations**:\n   - Flip animation when revealing cells\n   - Pulse effect when placing flags\n   - Shake animation when hitting a mine\n   - Explode animation for the mine you clicked\n\n3. **Win/Lose Effects**:\n   - Confetti particle effect when winning\n   - Highlight animation for hint cells\n   - Smooth modal appearances\n\n4. **Enhanced Visual Feedback**:\n   - Animated number reveals with 3D flip effect\n   - Color-coded numbers with transitions\n   - Dynamic shadow effects on hover\n\n5. **Mobile Improvements**:\n   - Touch support with long-press for flags\n   - Responsive animations that work on all devices\n   - Optimized performance for mobile\n\n6. **UI Polish**:\n   - Animated button click effects\n   - Smooth transitions between game states\n   - Enhanced visual hierarchy with animations\n\nThe game maintains all the original functionality while adding these visual enhancements to make gameplay more engaging and satisfying. The animations provide better feedback for player actions and make wins more exciting with the confetti celebration."
  },
  {
    "role": "user",
    "content": "dont flip the number inside board when i am clicking on a that and add 5 extraordinary features to it."
  },
  {
    "role": "assistant",
    "content": "Here's the improved Minesweeper game with the flip animation removed from number cells and 5 new extraordinary features:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Advanced Minesweeper</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --text-color: #e0e0e0;\n            --container-bg: #1e1e1e;\n            --button-bg: #333;\n            --button-hover: #4CAF50;\n            --mine-color: #f44336;\n            --flag-color: #4a2e2e;\n            --revealed-color: #252525;\n            --highlight-color: #FF9800;\n            --shadow-color: rgba(0, 0, 0, 0.5);\n        }\n\n        .light-mode {\n            --bg-color: #f5f5f5;\n            --text-color: #333;\n            --container-bg: #fff;\n            --button-bg: #e0e0e0;\n            --button-hover: #4CAF50;\n            --mine-color: #f44336;\n            --flag-color: #ffcdd2;\n            --revealed-color: #f5f5f5;\n            --highlight-color: #FF9800;\n            --shadow-color: rgba(0, 0, 0, 0.1);\n        }\n\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 20px;\n            transition: background-color 0.5s ease, color 0.5s ease;\n            min-height: 100vh;\n        }\n        \n        h1 {\n            color: #4CAF50;\n            margin-bottom: 10px;\n            text-shadow: 0 0 5px rgba(76, 175, 80, 0.5);\n            animation: fadeIn 1s ease-in-out;\n        }\n        \n        .game-container {\n            background-color: var(--container-bg);\n            border-radius: 10px;\n            padding: 20px;\n            box-shadow: 0 0 20px var(--shadow-color);\n            max-width: 800px;\n            width: 100%;\n            transition: background-color 0.5s ease, box-shadow 0.5s ease;\n            animation: slideUp 0.5s ease-out;\n            position: relative;\n        }\n        \n        .controls {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 20px;\n            align-items: center;\n            flex-wrap: wrap;\n            gap: 10px;\n        }\n        \n        .difficulty {\n            display: flex;\n            gap: 10px;\n            flex-wrap: wrap;\n        }\n        \n        button {\n            background-color: var(--button-bg);\n            color: var(--text-color);\n            border: none;\n            padding: 8px 16px;\n            border-radius: 5px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            position: relative;\n            overflow: hidden;\n        }\n        \n        button::after {\n            content: '';\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 5px;\n            height: 5px;\n            background: rgba(255, 255, 255, 0.5);\n            opacity: 0;\n            border-radius: 100%;\n            transform: scale(1, 1) translate(-50%);\n            transform-origin: 50% 50%;\n        }\n        \n        button:focus:not(:active)::after {\n            animation: ripple 0.6s ease-out;\n        }\n        \n        button:hover {\n            background-color: var(--button-hover);\n            transform: scale(1.05);\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n        }\n        \n        button.active {\n            background-color: var(--button-hover);\n            font-weight: bold;\n            transform: scale(1.05);\n        }\n        \n        .stats {\n            display: flex;\n            gap: 20px;\n            font-size: 18px;\n            flex-wrap: wrap;\n            justify-content: center;\n        }\n        \n        .stat {\n            background-color: var(--button-bg);\n            padding: 8px 16px;\n            border-radius: 5px;\n            min-width: 80px;\n            text-align: center;\n            transition: all 0.3s ease;\n            animation: fadeIn 0.5s ease-in;\n        }\n        \n        .stat span {\n            font-weight: bold;\n            color: #4CAF50;\n        }\n        \n        .board {\n            display: grid;\n            grid-template-columns: repeat(var(--cols), 30px);\n            grid-template-rows: repeat(var(--rows), 30px);\n            gap: 2px;\n            margin: 0 auto;\n            perspective: 1000px;\n        }\n        \n        .cell {\n            width: 30px;\n            height: 30px;\n            background-color: var(--button-bg);\n            border-radius: 3px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-weight: bold;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            user-select: none;\n            position: relative;\n        }\n        \n        .cell::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background: rgba(255, 255, 255, 0.1);\n            opacity: 0;\n            transition: opacity 0.3s;\n        }\n        \n        .cell:hover {\n            background-color: var(--button-hover);\n        }\n        \n        .cell:hover::before {\n            opacity: 1;\n        }\n        \n        .cell.revealed {\n            background-color: var(--revealed-color);\n            cursor: default;\n            animation: fadeIn 0.3s ease-out;\n        }\n        \n        .cell.flagged {\n            background-color: var(--flag-color);\n            animation: pulse 0.5s ease;\n        }\n        \n        .cell.mine {\n            background-color: var(--mine-color);\n        }\n        \n        .cell.mine-revealed {\n            background-color: var(--mine-color);\n            animation: shake 0.5s ease;\n        }\n        \n        .cell.highlight {\n            animation: highlight 1.5s ease-in-out;\n        }\n        \n        .number-1 { color: #2196F3; }\n        .number-2 { color: #4CAF50; }\n        .number-3 { color: #f44336; }\n        .number-4 { color: #3F51B5; }\n        .number-5 { color: #795548; }\n        .number-6 { color: #607D8B; }\n        .number-7 { color: #212121; }\n        .number-8 { color: #9C27B0; }\n        \n        .modal {\n            display: none;\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0, 0, 0, 0.8);\n            justify-content: center;\n            align-items: center;\n            z-index: 100;\n            animation: fadeIn 0.3s ease-out;\n        }\n        \n        .modal-content {\n            background-color: var(--container-bg);\n            padding: 30px;\n            border-radius: 10px;\n            text-align: center;\n            max-width: 400px;\n            width: 90%;\n            transform: scale(0.9);\n            opacity: 0;\n            animation: modalAppear 0.3s forwards 0.1s;\n            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);\n            transition: background-color 0.5s ease;\n        }\n        \n        .modal h2 {\n            color: #4CAF50;\n            margin-top: 0;\n            animation: fadeIn 0.5s ease;\n        }\n        \n        .modal button {\n            margin-top: 20px;\n        }\n        \n        .hint-btn {\n            background-color: #FF9800;\n        }\n        \n        .hint-btn:hover {\n            background-color: #FF5722;\n        }\n        \n        .theme-toggle {\n            background-color: #9C27B0;\n        }\n        \n        .zoom-btn {\n            background-color: #2196F3;\n        }\n        \n        /* Animations */\n        @keyframes fadeIn {\n            from { opacity: 0; }\n            to { opacity: 1; }\n        }\n        \n        @keyframes slideUp {\n            from { \n                opacity: 0;\n                transform: translateY(20px);\n            }\n            to { \n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n        \n        @keyframes pulse {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.1); }\n            100% { transform: scale(1); }\n        }\n        \n        @keyframes shake {\n            0%, 100% { transform: translateX(0); }\n            10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }\n            20%, 40%, 60%, 80% { transform: translateX(2px); }\n        }\n        \n        @keyframes ripple {\n            0% {\n                transform: scale(0, 0);\n                opacity: 0.5;\n            }\n            100% {\n                transform: scale(20, 20);\n                opacity: 0;\n            }\n        }\n        \n        @keyframes modalAppear {\n            100% {\n                transform: scale(1);\n                opacity: 1;\n            }\n        }\n        \n        @keyframes highlight {\n            0% { \n                background-color: var(--highlight-color);\n                box-shadow: 0 0 10px var(--highlight-color);\n            }\n            100% { \n                background-color: var(--revealed-color);\n                box-shadow: none;\n            }\n        }\n        \n        @keyframes explode {\n            0% {\n                transform: scale(1);\n                opacity: 1;\n            }\n            100% {\n                transform: scale(5);\n                opacity: 0;\n            }\n        }\n        \n        /* Particle effect for win */\n        .confetti {\n            position: absolute;\n            width: 10px;\n            height: 10px;\n            background-color: #f00;\n            border-radius: 50%;\n            animation: confettiFall 3s ease-out forwards;\n        }\n        \n        @keyframes confettiFall {\n            0% { \n                transform: translateY(-100px) rotate(0deg);\n                opacity: 1;\n            }\n            100% { \n                transform: translateY(100vh) rotate(360deg);\n                opacity: 0;\n            }\n        }\n        \n        /* Zoom feature */\n        .zoomed {\n            transform: scale(1.5);\n            transform-origin: center;\n            transition: transform 0.3s ease;\n            z-index: 10;\n        }\n        \n        /* Sound toggle */\n        .sound-toggle {\n            background-color: #607D8B;\n        }\n        \n        /* Auto-solver toggle */\n        .solver-toggle {\n            background-color: #8BC34A;\n        }\n        \n        /* Timer warning */\n        .warning {\n            color: #FF5722;\n            animation: pulse 1s infinite;\n        }\n        \n        /* Tutorial highlight */\n        .tutorial-highlight {\n            box-shadow: 0 0 0 3px #FF9800;\n            animation: pulse 1.5s infinite;\n        }\n        \n        @media (max-width: 600px) {\n            .cell {\n                width: 25px;\n                height: 25px;\n                font-size: 12px;\n            }\n            \n            .controls {\n                flex-direction: column;\n                gap: 10px;\n            }\n            \n            .stats {\n                width: 100%;\n                justify-content: space-between;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h1>Advanced Minesweeper</h1>\n    \n    <div class=\"game-container\">\n        <div class=\"controls\">\n            <div class=\"difficulty\">\n                <button id=\"easy-btn\" class=\"active\">Easy</button>\n                <button id=\"medium-btn\">Medium</button>\n                <button id=\"hard-btn\">Hard</button>\n                <button id=\"custom-btn\">Custom</button>\n            </div>\n            \n            <button id=\"theme-toggle\" class=\"theme-toggle\">🌙 Dark Mode</button>\n        </div>\n        \n        <div class=\"controls\">\n            <div class=\"stats\">\n                <div class=\"stat\">Mines: <span id=\"mines-count\">10</span></div>\n                <div class=\"stat\">Flags: <span id=\"flags-count\">0</span></div>\n                <div class=\"stat\">Time: <span id=\"time\">0</span></div>\n            </div>\n            \n            <button id=\"new-game-btn\">New Game</button>\n            <button id=\"hint-btn\" class=\"hint-btn\">Hint</button>\n            <button id=\"zoom-btn\" class=\"zoom-btn\">🔍 Zoom</button>\n            <button id=\"sound-toggle\" class=\"sound-toggle\">🔔 Sound</button>\n            <button id=\"solver-toggle\" class=\"solver-toggle\">🤖 Auto</button>\n        </div>\n        \n        <div id=\"board\" class=\"board\"></div>\n        \n        <div id=\"tutorial-highlight\" style=\"position: absolute; pointer-events: none; display: none;\"></div>\n    </div>\n    \n    <div id=\"game-over-modal\" class=\"modal\">\n        <div class=\"modal-content\">\n            <h2 id=\"game-result\">You Won!</h2>\n            <p id=\"game-stats\">Time: 0 seconds</p>\n            <button id=\"play-again-btn\">Play Again</button>\n        </div>\n    </div>\n    \n    <div id=\"custom-modal\" class=\"modal\">\n        <div class=\"modal-content\">\n            <h2>Custom Game</h2>\n            <div style=\"margin-bottom: 20px;\">\n                <label for=\"custom-rows\">Rows (5-30):</label>\n                <input type=\"number\" id=\"custom-rows\" min=\"5\" max=\"30\" value=\"10\" style=\"width: 60px; margin-left: 10px;\">\n            </div>\n            <div style=\"margin-bottom: 20px;\">\n                <label for=\"custom-cols\">Columns (5-30):</label>\n                <input type=\"number\" id=\"custom-cols\" min=\"5\" max=\"30\" value=\"10\" style=\"width: 60px; margin-left: 10px;\">\n            </div>\n            <div style=\"margin-bottom: 20px;\">\n                <label for=\"custom-mines\">Mines (10-50%):</label>\n                <input type=\"number\" id=\"custom-mines\" min=\"3\" max=\"300\" value=\"10\" style=\"width: 60px; margin-left: 10px;\">\n            </div>\n            <button id=\"start-custom-btn\">Start Game</button>\n            <button id=\"cancel-custom-btn\" style=\"margin-left: 10px;\">Cancel</button>\n        </div>\n    </div>\n    \n    <audio id=\"click-sound\" src=\"data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcguPAAAAAABUSVQyAAAABAAAAHmaGF2YQB9AAA+gD///4n///8AAAAATElTVBoAAABJT0ZULW1hc3RlckNvbnRyb2xCYXNlLmNvbQBQREYtYXV0by1yZXBsYXkABAAAAAAQAABzeAAAZGF0YQCAAAAAAP8=\"></audio>\n    <audio id=\"flag-sound\" src=\"data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcguPAAAAAABUSVQyAAAABAAAAHmaGF2YQB9AAA+gD///4n///8AAAAATElTVBoAAABJT0ZULW1hc3RlckNvbnRyb2xCYXNlLmNvbQBQREYtYXV0by1yZXBsYXkABAAAAAAQAABzeAAAZGF0YQCAAAAAAP8=\"></audio>\n    <audio id=\"mine-sound\" src=\"data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcguPAAAAAABUSVQyAAAABAAAAHmaGF2YQB9AAA+gD///4n///8AAAAATElTVBoAAABJT0ZULW1hc3RlckNvbnRyb2xCYXNlLmNvbQBQREYtYXV0by1yZXBsYXkABAAAAAAQAABzeAAAZGF0YQCAAAAAAP8=\"></audio>\n    <audio id=\"win-sound\" src=\"data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcguPAAAAAABUSVQyAAAABAAAAHmaGF2YQB9AAA+gD///4n///8AAAAATElTVBoAAABJT0ZULW1hc3RlckNvbnRyb2xCYXNlLmNvbQBQREYtYXV0by1yZXBsYXkABAAAAAAQAABzeAAAZGF0YQCAAAAAAP8=\"></audio>\n    \n    <script>\n        // Game state\n        let board = [];\n        let rows = 10;\n        let cols = 10;\n        let minesCount = 10;\n        let flagsCount = 0;\n        let revealedCount = 0;\n        let gameOver = false;\n        let firstClick = true;\n        let timer = 0;\n        let timerInterval = null;\n        let hintUsed = false;\n        let darkMode = true;\n        let soundEnabled = true;\n        let zoomEnabled = false;\n        let autoSolving = false;\n        let tutorialActive = false;\n        \n        // DOM elements\n        const boardElement = document.getElementById('board');\n        const minesCountElement = document.getElementById('mines-count');\n        const flagsCountElement = document.getElementById('flags-count');\n        const timeElement = document.getElementById('time');\n        const gameOverModal = document.getElementById('game-over-modal');\n        const gameResultElement = document.getElementById('game-result');\n        const gameStatsElement = document.getElementById('game-stats');\n        const playAgainBtn = document.getElementById('play-again-btn');\n        const newGameBtn = document.getElementById('new-game-btn');\n        const hintBtn = document.getElementById('hint-btn');\n        const themeToggleBtn = document.getElementById('theme-toggle');\n        const customModal = document.getElementById('custom-modal');\n        const zoomBtn = document.getElementById('zoom-btn');\n        const soundToggleBtn = document.getElementById('sound-toggle');\n        const solverToggleBtn = document.getElementById('solver-toggle');\n        const tutorialHighlight = document.getElementById('tutorial-highlight');\n        \n        // Audio elements\n        const clickSound = document.getElementById('click-sound');\n        const flagSound = document.getElementById('flag-sound');\n        const mineSound = document.getElementById('mine-sound');\n        const winSound = document.getElementById('win-sound');\n        \n        // Difficulty buttons\n        const easyBtn = document.getElementById('easy-btn');\n        const mediumBtn = document.getElementById('medium-btn');\n        const hardBtn = document.getElementById('hard-btn');\n        const customBtn = document.getElementById('custom-btn');\n        const startCustomBtn = document.getElementById('start-custom-btn');\n        const cancelCustomBtn = document.getElementById('cancel-custom-btn');\n        \n        // Initialize game\n        function initGame() {\n            // Clear existing board\n            boardElement.innerHTML = '';\n            board = [];\n            flagsCount = 0;\n            revealedCount = 0;\n            gameOver = false;\n            firstClick = true;\n            hintUsed = false;\n            autoSolving = false;\n            \n            // Reset buttons\n            hintBtn.disabled = false;\n            hintBtn.style.opacity = '1';\n            solverToggleBtn.textContent = '🤖 Auto';\n            \n            // Stop timer if running\n            if (timerInterval) {\n                clearInterval(timerInterval);\n                timerInterval = null;\n            }\n            timer = 0;\n            updateTimeDisplay();\n            \n            // Update mines count display\n            minesCountElement.textContent = minesCount;\n            flagsCountElement.textContent = flagsCount;\n            \n            // Set CSS variables for grid size\n            boardElement.style.setProperty('--rows', rows);\n            boardElement.style.setProperty('--cols', cols);\n            \n            // Create board\n            for (let r = 0; r < rows; r++) {\n                board[r] = [];\n                for (let c = 0; c < cols; c++) {\n                    board[r][c] = {\n                        isMine: false,\n                        isRevealed: false,\n                        isFlagged: false,\n                        adjacentMines: 0\n                    };\n                    \n                    const cell = document.createElement('div');\n                    cell.className = 'cell';\n                    cell.dataset.row = r;\n                    cell.dataset.col = c;\n                    \n                    // Event listeners\n                    cell.addEventListener('click', () => handleLeftClick(r, c));\n                    cell.addEventListener('contextmenu', (e) => {\n                        e.preventDefault();\n                        handleRightClick(r, c);\n                    });\n                    \n                    boardElement.appendChild(cell);\n                }\n            }\n            \n            // Start tutorial if first time visiting\n            if (localStorage.getItem('minesweeperTutorial') !== 'completed') {\n                startTutorial();\n            }\n        }\n        \n        // Place mines after first click (to ensure first click is always safe)\n        function placeMines(firstRow, firstCol) {\n            let minesPlaced = 0;\n            \n            while (minesPlaced < minesCount) {\n                const r = Math.floor(Math.random() * rows);\n                const c = Math.floor(Math.random() * cols);\n                \n                // Don't place mine on first click or where a mine already exists\n                if ((r !== firstRow || c !== firstCol) && !board[r][c].isMine) {\n                    board[r][c].isMine = true;\n                    minesPlaced++;\n                }\n            }\n            \n            // Calculate adjacent mines for each cell\n            for (let r = 0; r < rows; r++) {\n                for (let c = 0; c < cols; c++) {\n                    if (!board[r][c].isMine) {\n                        board[r][c].adjacentMines = countAdjacentMines(r, c);\n                    }\n                }\n            }\n            \n            // Start timer after mines are placed\n            startTimer();\n        }\n        \n        // Count adjacent mines for a cell\n        function countAdjacentMines(r, c) {\n            let count = 0;\n            \n            // Check all 8 surrounding cells\n            for (let dr = -1; dr <= 1; dr++) {\n                for (let dc = -1; dc <= 1; dc++) {\n                    if (dr === 0 && dc === 0) continue; // Skip current cell\n                    \n                    const nr = r + dr;\n                    const nc = c + dc;\n                    \n                    // Check if neighbor is within bounds and is a mine\n                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && board[nr][nc].isMine) {\n                        count++;\n                    }\n                }\n            }\n            \n            return count;\n        }\n        \n        // Handle left click\n        function handleLeftClick(r, c) {\n            if (gameOver || board[r][c].isFlagged) return;\n            \n            // Play click sound\n            if (soundEnabled) {\n                clickSound.currentTime = 0;\n                clickSound.play().catch(e => console.log(\"Audio play failed:\", e));\n            }\n            \n            // On first click, place mines (avoiding this cell)\n            if (firstClick) {\n                placeMines(r, c);\n                firstClick = false;\n            }\n            \n            // If clicked on a mine\n            if (board[r][c].isMine) {\n                revealMines(r, c);\n                gameOver = true;\n                if (soundEnabled) {\n                    mineSound.currentTime = 0;\n                    mineSound.play().catch(e => console.log(\"Audio play failed:\", e));\n                }\n                endGame(false);\n                return;\n            }\n            \n            // Reveal cell if not already revealed\n            if (!board[r][c].isRevealed) {\n                revealCell(r, c);\n                \n                // Check for win condition\n                checkWin();\n            } else {\n                // If clicking on a revealed number, try chord action\n                chordCells(r, c);\n            }\n        }\n        \n        // Handle right click (flag)\n        function handleRightClick(r, c) {\n            if (gameOver || board[r][c].isRevealed) return;\n            \n            const cell = getCellElement(r, c);\n            \n            if (!board[r][c].isFlagged) {\n                board[r][c].isFlagged = true;\n                cell.textContent = '🚩';\n                flagsCount++;\n                cell.classList.add('flagged');\n                \n                // Play flag sound\n                if (soundEnabled) {\n                    flagSound.currentTime = 0;\n                    flagSound.play().catch(e => console.log(\"Audio play failed:\", e));\n                }\n            } else {\n                board[r][c].isFlagged = false;\n                cell.textContent = '';\n                flagsCount--;\n                cell.classList.remove('flagged');\n            }\n            \n            flagsCountElement.textContent = flagsCount;\n        }\n        \n        // Reveal a cell\n        function revealCell(r, c) {\n            if (board[r][c].isRevealed || board[r][c].isFlagged) return;\n            \n            const cell = getCellElement(r, c);\n            board[r][c].isRevealed = true;\n            cell.classList.add('revealed');\n            revealedCount++;\n            \n            if (board[r][c].adjacentMines > 0) {\n                cell.textContent = board[r][c].adjacentMines;\n                cell.classList.add(`number-${board[r][c].adjacentMines}`);\n            } else {\n                // If no adjacent mines, reveal all adjacent cells recursively\n                for (let dr = -1; dr <= 1; dr++) {\n                    for (let dc = -1; dc <= 1; dc++) {\n                        if (dr === 0 && dc === 0) continue; // Skip current cell\n                        \n                        const nr = r + dr;\n                        const nc = c + dc;\n                        \n                        // Check if neighbor is within bounds\n                        if (nr >= 0 && nr < rows && nc >= 0 && nc < cols) {\n                            revealCell(nr, nc);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Chord action (when clicking on a revealed number)\n        function chordCells(r, c) {\n            const cell = board[r][c];\n            if (!cell.isRevealed || cell.adjacentMines === 0) return;\n            \n            // Count adjacent flags\n            let adjacentFlags = 0;\n            for (let dr = -1; dr <= 1; dr++) {\n                for (let dc = -1; dc <= 1; dc++) {\n                    if (dr === 0 && dc === 0) continue;\n                    \n                    const nr = r + dr;\n                    const nc = c + dc;\n                    \n                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && board[nr][nc].isFlagged) {\n                        adjacentFlags++;\n                    }\n                }\n            }\n            \n            // If flags match adjacent mines, reveal all unflagged adjacent cells\n            if (adjacentFlags === cell.adjacentMines) {\n                for (let dr = -1; dr <= 1; dr++) {\n                    for (let dc = -1; dc <= 1; dc++) {\n                        if (dr === 0 && dc === 0) continue;\n                        \n                        const nr = r + dr;\n                        const nc = c + dc;\n                        \n                        if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && \n                            !board[nr][nc].isRevealed && !board[nr][nc].isFlagged) {\n                            \n                            if (board[nr][nc].isMine) {\n                                revealMines(nr, nc);\n                                gameOver = true;\n                                if (soundEnabled) {\n                                    mineSound.currentTime = 0;\n                                    mineSound.play().catch(e => console.log(\"Audio play failed:\", e));\n                                }\n                                endGame(false);\n                                return;\n                            }\n                            \n                            revealCell(nr, nc);\n                        }\n                    }\n                }\n                \n                // Check for win condition after chording\n                checkWin();\n            }\n        }\n        \n        // Reveal all mines (when game is lost)\n        function revealMines(clickedR, clickedC) {\n            for (let r = 0; r < rows; r++) {\n                for (let c = 0; c < cols; c++) {\n                    if (board[r][c].isMine) {\n                        const cell = getCellElement(r, c);\n                        cell.textContent = '💣';\n                        \n                        if (r === clickedR && c === clickedC) {\n                            cell.classList.add('mine-revealed');\n                            setTimeout(() => {\n                                cell.style.animation = 'explode 0.5s forwards';\n                            }, 100);\n                        } else {\n                            cell.classList.add(board[r][c].isFlagged ? 'flagged' : 'mine-revealed');\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Check if player has won\n        function checkWin() {\n            if (revealedCount === (rows * cols - minesCount)) {\n                gameOver = true;\n                if (soundEnabled) {\n                    winSound.currentTime = 0;\n                    winSound.play().catch(e => console.log(\"Audio play failed:\", e));\n                }\n                endGame(true);\n                createConfetti();\n            }\n        }\n        \n        // End game (win or lose)\n        function endGame(isWin) {\n            // Stop timer\n            if (timerInterval) {\n                clearInterval(timerInterval);\n                timerInterval = null;\n            }\n            \n            if (isWin) {\n                // Flag all mines if won\n                for (let r = 0; r < rows; r++) {\n                    for (let c = 0; c < cols; c++) {\n                        if (board[r][c].isMine && !board[r][c].isFlagged) {\n                            board[r][c].isFlagged = true;\n                            const cell = getCellElement(r, c);\n                            cell.textContent = '🚩';\n                            cell.classList.add('flagged');\n                        }\n                    }\n                }\n                \n                // Disable hint button completely\n                hintBtn.disabled = true;\n                hintBtn.style.opacity = '0.5';\n            }\n            \n            // Show game over modal\n            gameResultElement.textContent = isWin ? 'You Won! 🎉' : 'Game Over! 💥';\n            gameStatsElement.textContent = `Time: ${timer} seconds | Mines: ${minesCount} | Size: ${rows}x${cols}`;\n            gameOverModal.style.display = 'flex';\n        }\n        \n        // Start timer\n        function startTimer() {\n            timer = 0;\n            updateTimeDisplay();\n            timerInterval = setInterval(() => {\n                timer++;\n                updateTimeDisplay();\n                \n                // Add warning effect after 1 minute\n                if (timer === 60) {\n                    timeElement.classList.add('warning');\n                }\n            }, 1000);\n        }\n        \n        // Update time display\n        function updateTimeDisplay() {\n            timeElement.textContent = timer;\n        }\n        \n        // Get cell DOM element\n        function getCellElement(r, c) {\n            return document.querySelector(`.cell[data-row=\"${r}\"][data-col=\"${c}\"]`);\n        }\n        \n        // Set difficulty\n        function setDifficulty(difficulty) {\n            switch (difficulty) {\n                case 'easy':\n                    rows = 10;\n                    cols = 10;\n                    minesCount = 10;\n                    break;\n                case 'medium':\n                    rows = 16;\n                    cols = 16;\n                    minesCount = 40;\n                    break;\n                case 'hard':\n                    rows = 16;\n                    cols = 30;\n                    minesCount = 99;\n                    break;\n                case 'custom':\n                    // Custom settings handled separately\n                    return;\n            }\n            \n            // Update active button\n            easyBtn.classList.remove('active');\n            mediumBtn.classList.remove('active');\n            hardBtn.classList.remove('active');\n            customBtn.classList.remove('active');\n            \n            document.getElementById(`${difficulty}-btn`).classList.add('active');\n            \n            initGame();\n        }\n        \n        // Show hint (reveal a safe cell)\n        function showHint() {\n            if (gameOver || firstClick || hintUsed) return;\n            \n            // Find all unrevealed, unflagged, non-mine cells\n            const safeCells = [];\n            for (let r = 0; r < rows; r++) {\n                for (let c = 0; c < cols; c++) {\n                    if (!board[r][c].isRevealed && !board[r][c].isFlagged && !board[r][c].isMine) {\n                        safeCells.push({ r, c });\n                    }\n                }\n            }\n            \n            if (safeCells.length > 0) {\n                // Pick a random safe cell\n                const { r, c } = safeCells[Math.floor(Math.random() * safeCells.length)];\n                const cell = getCellElement(r, c);\n                \n                // Animation for hint\n                cell.classList.add('highlight');\n                \n                setTimeout(() => {\n                    cell.classList.remove('highlight');\n                }, 1500);\n                \n                hintUsed = true;\n                hintBtn.disabled = true;\n                hintBtn.style.opacity = '0.5';\n            }\n        }\n        \n        // Create confetti effect for win\n        function createConfetti() {\n            const colors = ['#f00', '#0f0', '#00f', '#ff0', '#f0f', '#0ff'];\n            const container = document.querySelector('.game-container');\n            \n            for (let i = 0; i < 100; i++) {\n                const confetti = document.createElement('div');\n                confetti.className = 'confetti';\n                confetti.style.left = Math.random() * 100 + '%';\n                confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\n                confetti.style.animationDelay = Math.random() * 2 + 's';\n                container.appendChild(confetti);\n                \n                // Remove after animation\n                setTimeout(() => {\n                    confetti.remove();\n                }, 3000);\n            }\n        }\n        \n        // Toggle zoom feature\n        function toggleZoom() {\n            zoomEnabled = !zoomEnabled;\n            boardElement.classList.toggle('zoomed', zoomEnabled);\n            zoomBtn.textContent = zoomEnabled ? '🔍 Zoom Out' : '🔍 Zoom';\n        }\n        \n        // Toggle sound\n        function toggleSound() {\n            soundEnabled = !soundEnabled;\n            soundToggleBtn.textContent = soundEnabled ? '🔔 Sound' : '🔕 Mute';\n        }\n        \n        // Toggle auto-solver\n        function toggleSolver() {\n            autoSolving = !autoSolving;\n            solverToggleBtn.textContent = autoSolving ? '🤖 Solving...' : '🤖 Auto';\n            \n            if (autoSolving) {\n                // Start auto solver\n                autoSolveStep();\n            }\n        }\n        \n        // Auto-solver logic (basic implementation)\n        function autoSolveStep() {\n            if (!autoSolving || gameOver) return;\n            \n            // Simple logic: find obvious moves\n            let madeMove = false;\n            \n            // Look for safe moves first\n            for (let r = 0; r < rows; r++) {\n                for (let c = 0; c < cols; c++) {\n                    const cell = board[r][c];\n                    \n                    // Only look at revealed cells with adjacent mines\n                    if (cell.isRevealed && cell.adjacentMines > 0) {\n                        // Count adjacent flagged and unrevealed cells\n                        let adjacentFlags = 0;\n                        let adjacentUnrevealed = 0;\n                        \n                        for (let dr = -1; dr <= 1; dr++) {\n                            for (let dc = -1; dc <= 1; dc++) {\n                                if (dr === 0 && dc === 0) continue;\n                                \n                                const nr = r + dr;\n                                const nc = c + dc;\n                                \n                                if (nr >= 0 && nr < rows && nc >= 0 && nc < cols) {\n                                    if (board[nr][nc].isFlagged) {\n                                        adjacentFlags++;\n                                    } else if (!board[nr][nc].isRevealed) {\n                                        adjacentUnrevealed++;\n                                    }\n                                }\n                            }\n                        }\n                        \n                        // If adjacent flags equals the number, reveal unrevealed cells\n                        if (cell.adjacentMines === adjacentFlags && adjacentUnrevealed > 0) {\n                            for (let dr = -1; dr <= 1; dr++) {\n                                for (let dc = -1; dc <= 1; dc++) {\n                                    if (dr === 0 && dc === 0) continue;\n                                    \n                                    const nr = r + dr;\n                                    const nc = c + dc;\n                                    \n                                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && \n                                        !board[nr][nc].isRevealed && !board[nr][nc].isFlagged) {\n                                        \n                                        // Reveal the cell\n                                        handleLeftClick(nr, nc);\n                                        madeMove = true;\n                                        return setTimeout(autoSolveStep, 500);\n                                    }\n                                }\n                            }\n                        }\n                        \n                        // If number - flags equals unrevealed, flag all unrevealed\n                        if ((cell.adjacentMines - adjacentFlags) === adjacentUnrevealed && adjacentUnrevealed > 0) {\n                            for (let dr = -1; dr <= 1; dr++) {\n                                for (let dc = -1; dc <= 1; dc++) {\n                                    if (dr === 0 && dc === 0) continue;\n                                    \n                                    const nr = r + dr;\n                                    const nc = c + dc;\n                                    \n                                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && \n                                        !board[nr][nc].isRevealed && !board[nr][nc].isFlagged) {\n                                        \n                                        // Flag the cell\n                                        handleRightClick(nr, nc);\n                                        madeMove = true;\n                                        return setTimeout(autoSolveStep, 500);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // If no safe moves found, make a random move\n            if (!madeMove) {\n                const unrevealedCells = [];\n                for (let r = 0; r < rows; r++) {\n                    for (let c = 0; c < cols; c++) {\n                        if (!board[r][c].isRevealed && !board[r][c].isFlagged) {\n                            unrevealedCells.push({ r, c });\n                        }\n                    }\n                }\n                \n                if (unrevealedCells.length > 0) {\n                    const { r, c } = unrevealedCells[Math.floor(Math.random() * unrevealedCells.length)];\n                    handleLeftClick(r, c);\n                    setTimeout(autoSolveStep, 500);\n                } else {\n                    autoSolving = false;\n                    solverToggleBtn.textContent = '🤖 Auto';\n                }\n            }\n        }\n        \n        // Start tutorial\n        function startTutorial() {\n            tutorialActive = true;\n            const steps = [\n                {\n                    message: \"Welcome to Advanced Minesweeper! Let's learn how to play.\",\n                    highlight: null\n                },\n                {\n                    message: \"Click any cell to start the game. The first click is always safe!\",\n                    highlight: null\n                },\n                {\n                    message: \"Numbers show how many mines are adjacent to that cell.\",\n                    highlight: null\n                },\n                {\n                    message: \"Right-click to place a flag where you think a mine is.\",\n                    highlight: null\n                },\n                {\n                    message: \"When a number has the exact number of flags around it, click the number to reveal remaining cells.\",\n                    highlight: null\n                },\n                {\n                    message: \"Use the Hint button to highlight a safe move when you're stuck.\","
  }
];