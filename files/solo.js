const conversation = [
  {
    "role": "system",
    "content": "Generate a single page HTML app in a single Markdown code block."
  },
  {
    "role": "user",
    "content": "create solo levelling system"
  },
  {
    "role": "assistant",
    "content": "Here's a single-page HTML app for a \"Solo Leveling\" style RPG progression system in a single code block:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Solo Leveling System</title>\n    <style>\n        body {\n            font-family: 'Arial', sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #1a1a2e;\n            color: #e6e6e6;\n        }\n        .container {\n            background-color: #16213e;\n            border-radius: 10px;\n            padding: 20px;\n            box-shadow: 0 0 20px rgba(0,0,0,0.5);\n        }\n        h1 {\n            color: #f05454;\n            text-align: center;\n            margin-bottom: 30px;\n        }\n        .stats {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 15px;\n            margin-bottom: 20px;\n        }\n        .stat {\n            background-color: #0f3460;\n            padding: 10px;\n            border-radius: 5px;\n        }\n        .progress-container {\n            margin: 20px 0;\n        }\n        progress {\n            width: 100%;\n            height: 30px;\n            border-radius: 5px;\n        }\n        .actions {\n            display: flex;\n            gap: 10px;\n            margin-bottom: 20px;\n        }\n        button {\n            background-color: #f05454;\n            color: white;\n            border: none;\n            padding: 10px 15px;\n            border-radius: 5px;\n            cursor: pointer;\n            font-weight: bold;\n            transition: all 0.3s;\n        }\n        button:hover {\n            background-color: #d93b3b;\n            transform: scale(1.05);\n        }\n        button:disabled {\n            background-color: #555;\n            cursor: not-allowed;\n        }\n        .log {\n            height: 200px;\n            overflow-y: auto;\n            background-color: #0f3460;\n            padding: 10px;\n            border-radius: 5px;\n            margin-top: 20px;\n        }\n        .log-entry {\n            margin: 5px 0;\n            padding: 5px;\n            border-bottom: 1px solid #1a1a2e;\n        }\n        .level-up {\n            color: #4cc9f0;\n            font-weight: bold;\n        }\n        .quest {\n            color: #f8961e;\n        }\n        .danger {\n            color: #f94144;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>SOLO LEVELING SYSTEM</h1>\n        \n        <div class=\"stats\">\n            <div class=\"stat\">\n                <h3>Level: <span id=\"level\">1</span></h3>\n                <div class=\"progress-container\">\n                    <label>EXP: <span id=\"currentExp\">0</span>/<span id=\"maxExp\">100</span></label>\n                    <progress id=\"expBar\" value=\"0\" max=\"100\"></progress>\n                </div>\n            </div>\n            <div class=\"stat\">\n                <h3>Stats</h3>\n                <p>STR: <span id=\"str\">5</span></p>\n                <p>AGI: <span id=\"agi\">5</span></p>\n                <p>VIT: <span id=\"vit\">5</span></p>\n                <p>INT: <span id=\"int\">5</span></p>\n            </div>\n            <div class=\"stat\">\n                <h3>Resources</h3>\n                <p>HP: <span id=\"hp\">50</span>/<span id=\"maxHp\">50</span></p>\n                <p>MP: <span id=\"mp\">30</span>/<span id=\"maxMp\">30</span></p>\n                <p>Stamina: <span id=\"stamina\">100</span>/100</p>\n            </div>\n            <div class=\"stat\">\n                <h3>System</h3>\n                <p>Daily Quests: <span id=\"dailyQuests\">0</span>/3</p>\n                <p>Points: <span id=\"points\">0</span></p>\n                <p>Status: <span id=\"status\">Normal</span></p>\n            </div>\n        </div>\n        \n        <div class=\"actions\">\n            <button id=\"trainBtn\">Train (10 Stamina)</button>\n            <button id=\"huntBtn\">Hunt Monsters (20 Stamina)</button>\n            <button id=\"questBtn\">Daily Quest (30 Stamina)</button>\n            <button id=\"restBtn\">Rest (Recover 50 Stamina)</button>\n            <button id=\"upgradeBtn\">Upgrade Stats (10 Points)</button>\n        </div>\n        \n        <div class=\"log\" id=\"log\">\n            <div class=\"log-entry\">System initialized. Welcome, Player.</div>\n            <div class=\"log-entry quest\">Daily Quest Available: Defeat 3 monsters</div>\n        </div>\n    </div>\n\n    <script>\n        // Game state\n        const state = {\n            level: 1,\n            exp: 0,\n            maxExp: 100,\n            str: 5,\n            agi: 5,\n            vit: 5,\n            int: 5,\n            hp: 50,\n            maxHp: 50,\n            mp: 30,\n            maxMp: 30,\n            stamina: 100,\n            points: 0,\n            dailyQuests: 0,\n            status: 'Normal'\n        };\n\n        // DOM elements\n        const elements = {\n            level: document.getElementById('level'),\n            currentExp: document.getElementById('currentExp'),\n            maxExp: document.getElementById('maxExp'),\n            expBar: document.getElementById('expBar'),\n            str: document.getElementById('str'),\n            agi: document.getElementById('agi'),\n            vit: document.getElementById('vit'),\n            int: document.getElementById('int'),\n            hp: document.getElementById('hp'),\n            maxHp: document.getElementById('maxHp'),\n            mp: document.getElementById('mp'),\n            maxMp: document.getElementById('maxMp'),\n            stamina: document.getElementById('stamina'),\n            points: document.getElementById('points'),\n            dailyQuests: document.getElementById('dailyQuests'),\n            status: document.getElementById('status'),\n            trainBtn: document.getElementById('trainBtn'),\n            huntBtn: document.getElementById('huntBtn'),\n            questBtn: document.getElementById('questBtn'),\n            restBtn: document.getElementById('restBtn'),\n            upgradeBtn: document.getElementById('upgradeBtn'),\n            log: document.getElementById('log')\n        };\n\n        // Update UI\n        function updateUI() {\n            elements.level.textContent = state.level;\n            elements.currentExp.textContent = state.exp;\n            elements.maxExp.textContent = state.maxExp;\n            elements.expBar.value = state.exp;\n            elements.expBar.max = state.maxExp;\n            elements.str.textContent = state.str;\n            elements.agi.textContent = state.agi;\n            elements.vit.textContent = state.vit;\n            elements.int.textContent = state.int;\n            elements.hp.textContent = state.hp;\n            elements.maxHp.textContent = state.maxHp;\n            elements.mp.textContent = state.mp;\n            elements.maxMp.textContent = state.maxMp;\n            elements.stamina.textContent = state.stamina;\n            elements.points.textContent = state.points;\n            elements.dailyQuests.textContent = state.dailyQuests;\n            elements.status.textContent = state.status;\n            \n            // Disable buttons when stamina is low\n            elements.trainBtn.disabled = state.stamina < 10;\n            elements.huntBtn.disabled = state.stamina < 20;\n            elements.questBtn.disabled = state.stamina < 30;\n            elements.upgradeBtn.disabled = state.points < 10;\n        }\n\n        // Add log entry\n        function addLog(message, type = '') {\n            const entry = document.createElement('div');\n            entry.className = `log-entry ${type}`;\n            entry.textContent = message;\n            elements.log.appendChild(entry);\n            elements.log.scrollTop = elements.log.scrollHeight;\n        }\n\n        // Gain EXP\n        function gainExp(amount) {\n            state.exp += amount;\n            addLog(`Gained ${amount} EXP!`);\n            \n            // Check for level up\n            if (state.exp >= state.maxExp) {\n                levelUp();\n            }\n            \n            updateUI();\n        }\n\n        // Level up\n        function levelUp() {\n            state.level++;\n            state.exp -= state.maxExp;\n            state.maxExp = Math.floor(state.maxExp * 1.5);\n            state.points += 5;\n            \n            // Increase stats\n            state.str += 1;\n            state.agi += 1;\n            state.vit += 1;\n            state.int += 1;\n            \n            // Increase HP/MP\n            state.maxHp += 10;\n            state.hp = state.maxHp;\n            state.maxMp += 5;\n            state.mp = state.maxMp;\n            \n            addLog(`LEVEL UP! You are now Level ${state.level}!`, 'level-up');\n            addLog(`Stats increased! +5 Points available.`);\n            \n            updateUI();\n        }\n\n        // Actions\n        elements.trainBtn.addEventListener('click', () => {\n            state.stamina -= 10;\n            const expGain = 5 + Math.floor(Math.random() * 5);\n            gainExp(expGain);\n            addLog(`You trained hard and gained ${expGain} EXP.`);\n            updateUI();\n        });\n\n        elements.huntBtn.addEventListener('click', () => {\n            state.stamina -= 20;\n            const expGain = 15 + Math.floor(Math.random() * 10);\n            gainExp(expGain);\n            \n            // 30% chance of taking damage\n            if (Math.random() < 0.3) {\n                const damage = Math.floor(Math.random() * 10) + 1;\n                state.hp = Math.max(1, state.hp - damage);\n                addLog(`You defeated a monster (+${expGain} EXP) but took ${damage} damage!`, 'danger');\n            } else {\n                addLog(`You defeated a monster and gained ${expGain} EXP!`);\n            }\n            \n            updateUI();\n        });\n\n        elements.questBtn.addEventListener('click', () => {\n            if (state.dailyQuests >= 3) {\n                addLog(\"You've completed all daily quests today.\");\n                return;\n            }\n            \n            state.stamina -= 30;\n            state.dailyQuests++;\n            const expGain = 50 + Math.floor(Math.random() * 30);\n            gainExp(expGain);\n            state.points += 2;\n            \n            addLog(`Daily Quest completed! +${expGain} EXP and +2 Points!`, 'quest');\n            \n            if (state.dailyQuests >= 3) {\n                addLog(\"All daily quests completed! Come back tomorrow.\", 'quest');\n            }\n            \n            updateUI();\n        });\n\n        elements.restBtn.addEventListener('click', () => {\n            state.stamina = Math.min(100, state.stamina + 50);\n            state.hp = state.maxHp;\n            state.mp = state.maxMp;\n            addLog(\"You rested and recovered stamina, HP, and MP.\");\n            updateUI();\n        });\n\n        elements.upgradeBtn.addEventListener('click', () => {\n            state.points -= 10;\n            const stat = ['str', 'agi', 'vit', 'int'][Math.floor(Math.random() * 4)];\n            state[stat] += 2;\n            addLog(`Used 10 Points to increase ${stat.toUpperCase()} by 2!`);\n            updateUI();\n        });\n\n        // Initialize\n        updateUI();\n    </script>\n</body>\n</html>\n```\n\nThis HTML app includes:\n\n1. A complete Solo Leveling style progression system with:\n   - Leveling up with increasing EXP requirements\n   - Four core stats (STR, AGI, VIT, INT)\n   - HP/MP/Stamina system\n   - Daily quests\n   - Stat points for upgrades\n\n2. Four main actions:\n   - Train (low risk, low reward)\n   - Hunt Monsters (medium risk, medium reward)\n   - Daily Quests (high cost, high reward)\n   - Rest (recover resources)\n   - Upgrade Stats (spend points)\n\n3. Visual feedback:\n   - Progress bars\n   - Color-coded log system\n   - Responsive UI that disables actions when requirements aren't met\n\n4. Random elements:\n   - Random EXP gains\n   - Chance of taking damage during hunts\n   - Random stat upgrades\n\nYou can copy this entire code block into an HTML file and open it in any browser to play the game."
  },
  {
    "role": "user",
    "content": "Improve this app!"
  },
  {
    "role": "assistant",
    "content": "# Enhanced Solo Leveling System\n\nHere's a significantly improved version of the Solo Leveling RPG system with more features, better visuals, and deeper gameplay mechanics:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Solo Leveling System Pro</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        :root {\n            --dark-bg: #0f0e17;\n            --primary: #ff8906;\n            --secondary: #f25f4c;\n            --accent: #e53170;\n            --text: #fffffe;\n            --highlight: #4cc9f0;\n            --panel-bg: #16161a;\n            --danger: #f94144;\n            --success: #2a9d8f;\n        }\n        \n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n        \n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background-color: var(--dark-bg);\n            color: var(--text);\n            line-height: 1.6;\n            padding: 20px;\n            background-image: radial-gradient(circle at 50% 50%, #1a1a2e 0%, #0f0e17 100%);\n        }\n        \n        .game-container {\n            max-width: 1000px;\n            margin: 0 auto;\n            background-color: var(--panel-bg);\n            border-radius: 15px;\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n            overflow: hidden;\n        }\n        \n        header {\n            background: linear-gradient(135deg, var(--primary), var(--accent));\n            color: white;\n            padding: 20px;\n            text-align: center;\n            position: relative;\n            border-bottom: 5px solid var(--secondary);\n        }\n        \n        h1 {\n            font-size: 2.5rem;\n            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n            margin-bottom: 10px;\n            letter-spacing: 1px;\n        }\n        \n        .level-display {\n            position: absolute;\n            right: 20px;\n            top: 20px;\n            background-color: rgba(0, 0, 0, 0.7);\n            padding: 10px 15px;\n            border-radius: 50px;\n            font-weight: bold;\n            font-size: 1.5rem;\n            border: 3px solid var(--highlight);\n        }\n        \n        .main-content {\n            display: grid;\n            grid-template-columns: 1fr 2fr;\n            gap: 20px;\n            padding: 20px;\n        }\n        \n        @media (max-width: 768px) {\n            .main-content {\n                grid-template-columns: 1fr;\n            }\n        }\n        \n        .stats-panel {\n            background-color: rgba(10, 10, 20, 0.7);\n            border-radius: 10px;\n            padding: 15px;\n            border: 1px solid var(--primary);\n        }\n        \n        .panel-title {\n            color: var(--primary);\n            margin-bottom: 15px;\n            padding-bottom: 5px;\n            border-bottom: 2px solid var(--secondary);\n            font-size: 1.2rem;\n        }\n        \n        .stat-row {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 10px;\n        }\n        \n        .stat-name {\n            font-weight: bold;\n        }\n        \n        .stat-value {\n            color: var(--highlight);\n        }\n        \n        progress {\n            width: 100%;\n            height: 20px;\n            border-radius: 10px;\n            background-color: #333;\n            margin-bottom: 15px;\n            overflow: hidden;\n        }\n        \n        progress::-webkit-progress-bar {\n            background-color: #333;\n            border-radius: 10px;\n        }\n        \n        progress::-webkit-progress-value {\n            background: linear-gradient(to right, var(--primary), var(--accent));\n            border-radius: 10px;\n        }\n        \n        progress::-moz-progress-bar {\n            background: linear-gradient(to right, var(--primary), var(--accent));\n            border-radius: 10px;\n        }\n        \n        .resource-bar {\n            display: flex;\n            align-items: center;\n            margin-bottom: 10px;\n        }\n        \n        .resource-icon {\n            width: 20px;\n            margin-right: 10px;\n            text-align: center;\n        }\n        \n        .hp-icon { color: var(--danger); }\n        .mp-icon { color: var(--highlight); }\n        .stamina-icon { color: var(--primary); }\n        \n        .actions-panel {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n            gap: 15px;\n            margin-bottom: 20px;\n        }\n        \n        .action-btn {\n            background: linear-gradient(to bottom, #2a2a3a, #1a1a2a);\n            color: white;\n            border: none;\n            padding: 12px;\n            border-radius: 8px;\n            cursor: pointer;\n            font-weight: bold;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            transition: all 0.3s;\n            border: 1px solid var(--primary);\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n        }\n        \n        .action-btn:hover {\n            transform: translateY(-3px);\n            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.4);\n            border-color: var(--highlight);\n        }\n        \n        .action-btn:active {\n            transform: translateY(1px);\n        }\n        \n        .action-btn:disabled {\n            opacity: 0.5;\n            cursor: not-allowed;\n            transform: none;\n            box-shadow: none;\n            border-color: #666;\n        }\n        \n        .action-cost {\n            font-size: 0.8rem;\n            opacity: 0.8;\n            margin-top: 5px;\n        }\n        \n        .quest-log {\n            background-color: rgba(0, 0, 0, 0.5);\n            border-radius: 10px;\n            padding: 15px;\n            height: 300px;\n            overflow-y: auto;\n            border: 1px solid var(--secondary);\n        }\n        \n        .log-entry {\n            margin-bottom: 10px;\n            padding-bottom: 10px;\n            border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n            animation: fadeIn 0.3s ease-out;\n        }\n        \n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(10px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n        \n        .normal { color: var(--text); }\n        .level-up { color: var(--highlight); font-weight: bold; }\n        .quest { color: var(--success); }\n        .danger { color: var(--danger); }\n        .rare { color: var(--accent); }\n        .warning { color: var(--primary); }\n        \n        .shop-panel {\n            margin-top: 20px;\n            background-color: rgba(64, 46, 91, 0.7);\n            border-radius: 10px;\n            padding: 15px;\n            border: 1px solid var(--accent);\n        }\n        \n        .shop-items {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n            gap: 10px;\n        }\n        \n        .shop-item {\n            background: rgba(30, 30, 46, 0.7);\n            padding: 10px;\n            border-radius: 5px;\n            border: 1px solid var(--primary);\n        }\n        \n        .achievements-panel {\n            margin-top: 20px;\n            background-color: rgba(37, 46, 71, 0.7);\n            border-radius: 10px;\n            padding: 15px;\n            border: 1px solid var(--highlight);\n        }\n        \n        .achievement {\n            display: flex;\n            margin-bottom: 10px;\n            align-items: center;\n        }\n        \n        .achievement-icon {\n            margin-right: 10px;\n            font-size: 1.5rem;\n        }\n        \n        .achievement.unlocked {\n            opacity: 1;\n        }\n        \n        .achievement.locked {\n            opacity: 0.5;\n        }\n        \n        .modal {\n            display: none;\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0, 0, 0, 0.8);\n            z-index: 100;\n            justify-content: center;\n            align-items: center;\n        }\n        \n        .modal-content {\n            background-color: var(--panel-bg);\n            padding: 30px;\n            border-radius: 15px;\n            width: 90%;\n            max-width: 600px;\n            max-height: 80vh;\n            overflow-y: auto;\n            border: 3px solid var(--primary);\n            box-shadow: 0 5px 30px rgba(0, 0, 0, 0.7);\n            animation: modalOpen 0.4s ease-out;\n        }\n        \n        @keyframes modalOpen {\n            from { opacity: 0; transform: translateY(-50px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n        \n        .close-modal {\n            position: absolute;\n            top: 15px;\n            right: 15px;\n            font-size: 1.5rem;\n            cursor: pointer;\n            color: var(--text);\n        }\n        \n        .skill-tree {\n            display: grid;\n            grid-template-columns: repeat(3, 1fr);\n            gap: 15px;\n        }\n        \n        .skill-node {\n            background-color: #2a2a3a;\n            border-radius: 8px;\n            padding: 10px;\n            text-align: center;\n            border: 2px solid #444;\n            cursor: pointer;\n            transition: all 0.3s;\n        }\n        \n        .skill-node:hover {\n            border-color: var(--primary);\n        }\n        \n        .skill-node.unlocked {\n            border-color: var(--highlight);\n            background-color: rgba(76, 201, 240, 0.1);\n        }\n        \n        .skill-node.locked {\n            opacity: 0.6;\n            cursor: not-allowed;\n        }\n        \n        .inventory-panel {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));\n            gap: 10px;\n            margin-top: 10px;\n        }\n        \n        .inventory-item {\n            background-color: #2a2a3a;\n            border-radius: 5px;\n            padding: 10px;\n            text-align: center;\n            border: 1px solid #444;\n            cursor: pointer;\n        }\n        \n        .inventory-item.empty {\n            opacity: 0.3;\n            cursor: default;\n        }\n        \n        .tabs {\n            display: flex;\n            border-bottom: 1px solid var(--primary);\n            margin-bottom: 15px;\n        }\n        \n        .tab {\n            padding: 10px 20px;\n            cursor: pointer;\n            border-radius: 5px 5px 0 0;\n            margin-right: 5px;\n            background-color: rgba(10, 10, 20, 0.7);\n        }\n        \n        .tab.active {\n            background-color: var(--primary);\n            color: white;\n            font-weight: bold;\n        }\n        \n        .tab-content {\n            display: none;\n        }\n        \n        .tab-content.active {\n            display: block;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"game-container\">\n        <header>\n            <h1>SHADOW MONARCH SYSTEM</h1>\n            <div class=\"level-display\">Lv. <span id=\"level\">1</span></div>\n        </header>\n        \n        <div class=\"main-content\">\n            <div class=\"player-info\">\n                <div class=\"stats-panel\">\n                    <h2 class=\"panel-title\">PLAYER STATS</h2>\n                    \n                    <progress id=\"expBar\" value=\"0\" max=\"100\"></progress>\n                    <div class=\"stat-row\">\n                        <span>EXP:</span>\n                        <span><span id=\"currentExp\">0</span>/<span id=\"maxExp\">100</span></span>\n                    </div>\n                    \n                    <div class=\"resource-bar\">\n                        <span class=\"resource-icon hp-icon\">♥</span>\n                        <progress id=\"hpBar\" value=\"100\" max=\"100\"></progress>\n                        <span class=\"stat-value\"><span id=\"hp\">100</span>/<span id=\"maxHp\">100</span></span>\n                    </div>\n                    \n                    <div class=\"resource-bar\">\n                        <span class=\"resource-icon mp-icon\">✷</span>\n                        <progress id=\"mpBar\" value=\"50\" max=\"50\"></progress>\n                        <span class=\"stat-value\"><span id=\"mp\">50</span>/<span id=\"maxMp\">50</span></span>\n                    </div>\n                    \n                    <div class=\"resource-bar\">\n                        <span class=\"resource-icon stamina-icon\">⚡</span>\n                        <progress id=\"staminaBar\" value=\"100\" max=\"100\"></progress>\n                        <span class=\"stat-value\"><span id=\"stamina\">100</span>/100</span>\n                    </div>\n                    \n                    <hr style=\"border-color: rgba(255,255,255,0.1); margin: 15px 0;\">\n                    \n                    <div class=\"stat-row\">\n                        <span class=\"stat-name\">STR:</span>\n                        <span class=\"stat-value\" id=\"str\">5</span>\n                    </div>\n                    <div class=\"stat-row\">\n                        <span class=\"stat-name\">AGI:</span>\n                        <span class=\"stat-value\" id=\"agi\">5</span>\n                    </div>\n                    <div class=\"stat-row\">\n                        <span class=\"stat-name\">VIT:</span>\n                        <span class=\"stat-value\" id=\"vit\">5</span>\n                    </div>\n                    <div class=\"stat-row\">\n                        <span class=\"stat-name\">INT:</span>\n                        <span class=\"stat-value\" id=\"int\">5</span>\n                    </div>\n                    <div class=\"stat-row\">\n                        <span class=\"stat-name\">Points:</span>\n                        <span class=\"stat-value\" id=\"points\">0</span>\n                    </div>\n                    \n                    <hr style=\"border-color: rgba(255,255,255,0.1); margin: 15px 0;\">\n                    \n                    <div class=\"stat-row\">\n                        <span class=\"stat-name\">Gold:</span>\n                        <span class=\"stat-value\" id=\"gold\">100</span>\n                    </div>\n                    <div class=\"stat-row\">\n                        <span class=\"stat-name\">Dungeon:</span>\n                        <span class=\"stat-value\" id=\"dungeonLevel\">1</span>\n                    </div>\n                    <div class=\"stat-row\">\n                        <span class=\"stat-name\">Quests:</span>\n                        <span class=\"stat-value\" id=\"dailyQuests\">0</span>/3\n                    </div>\n                </div>\n                \n                <div class=\"achievements-panel\">\n                    <h2 class=\"panel-title\">ACHIEVEMENTS</h2>\n                    <div id=\"achievementsList\">\n                        <div class=\"achievement locked\">\n                            <span class=\"achievement-icon\">🔒</span>\n                            <span>First Kill (Kill your first monster)</span>\n                        </div>\n                        <div class=\"achievement locked\">\n                            <span class=\"achievement-icon\">🔒</span>\n                            <span>Level 10 (Reach level 10)</span>\n                        </div>\n                        <div class=\"achievement locked\">\n                            <span class=\"achievement-icon\">🔒</span>\n                            <span>Quest Master (Complete all daily quests)</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"game-content\">\n                <div class=\"actions-panel\">\n                    <button class=\"action-btn\" id=\"trainBtn\">\n                        Train\n                        <span class=\"action-cost\">⚡10 Stamina</span>\n                    </button>\n                    <button class=\"action-btn\" id=\"huntBtn\">\n                        Hunt Monsters\n                        <span class=\"action-cost\">⚡20 Stamina</span>\n                    </button>\n                    <button class=\"action-btn\" id=\"questBtn\">\n                        Daily Quest\n                        <span class=\"action-cost\">⚡30 Stamina</span>\n                    </button>\n                    <button class=\"action-btn\" id=\"restBtn\">\n                        Rest\n                        <span class=\"action-cost\">Recovers 50</span>\n                    </button>\n                    <button class=\"action-btn\" id=\"upgradeBtn\">\n                        Upgrade Stats\n                        <span class=\"action-cost\">10 Points</span>\n                    </button>\n                    <button class=\"action-btn\" id=\"dungeonBtn\">\n                        Enter Dungeon\n                        <span class=\"action-cost\">⚡40 Stamina</span>\n                    </button>\n                    <button class=\"action-btn\" id=\"shopBtn\">\n                        Open Shop\n                    </button>\n                    <button class=\"action-btn\" id=\"skillsBtn\">\n                        Skills\n                    </button>\n                </div>\n                \n                <div class=\"tabs\">\n                    <div class=\"tab active\" data-tab=\"log\">Game Log</div>\n                    <div class=\"tab\" data-tab=\"inventory\">Inventory</div>\n                </div>\n                \n                <div class=\"tab-content active\" id=\"logTab\">\n                    <div class=\"quest-log\" id=\"log\">\n                        <div class=\"log-entry normal\">Shadow Monarch System initialized...</div>\n                        <div class=\"log-entry normal\">Player status confirmed. Welcome, Sung Jin-Woo.</div>\n                        <div class=\"log-entry quest\">➤ Daily Quest Available: Hunt 3 Monsters (Reward: 150 EXP, Bonus Stats)</div>\n                    </div>\n                </div>\n                \n                <div class=\"tab-content\" id=\"inventoryTab\">\n                    <div class=\"quest-log\">\n                        <div class=\"inventory-panel\" id=\"inventory\">\n                            <div class=\"inventory-item empty\">Empty</div>\n                            <div class=\"inventory-item empty\">Empty</div>\n                            <div class=\"inventory-item empty\">Empty</div>\n                            <div class=\"inventory-item empty\">Empty</div>\n                            <div class=\"inventory-item empty\">Empty</div>\n                            <div class=\"inventory-item empty\">Empty</div>\n                            <div class=\"inventory-item empty\">Empty</div>\n                            <div class=\"inventory-item empty\">Empty</div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"shop-panel\">\n                    <h2 class=\"panel-title\">RECOMMENDED ITEMS</h2>\n                    <div class=\"shop-items\">\n                        <div class=\"shop-item\">\n                            <strong>Health Potion</strong><br>\n                            Restores 30 HP<br>\n                            <button class=\"action-btn\" style=\"padding: 5px 10px; margin-top: 5px;\" id=\"buyHpPotionBtn\">Buy (50 Gold)</button>\n                        </div>\n                        <div class=\"shop-item\">\n                            <strong>Mana Potion</strong><br>\n                            Restores 20 MP<br>\n                            <button class=\"action-btn\" style=\"padding: 5px 10px; margin-top: 5px;\" id=\"buyMpPotionBtn\">Buy (40 Gold)</button>\n                        </div>\n                        <div class=\"shop-item\">\n                            <strong>Stamina Elixir</strong><br>\n                            Restores 40 Stamina<br>\n                            <button class=\"action-btn\" style=\"padding: 5px 10px; margin-top: 5px;\" id=\"buyStaminaPotionBtn\">Buy(60 Gold)</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <!-- Modals -->\n    <div class=\"modal\" id=\"shopModal\">\n        <div class=\"modal-content\">\n            <span class=\"close-modal\">&times;</span>\n            <h2>SHADOW MARKET</h2>\n            <p>Your Gold: <span id=\"modalGold\">100</span></p>\n            <div class=\"shop-items\">\n                <div class=\"shop-item\">\n                    <strong>Health Potion (x3)</strong><br>\n                    Restores 30 HP each<br>\n                    Price: 120 Gold<br>\n                    <button class=\"action-btn\" style=\"padding: 5px 10px; margin-top: 5px;\" id=\"buyHpPotionPackBtn\">Buy</button>\n                </div>\n                <div class=\"shop-item\">\n                    <strong>Mana Potion (x3)</strong><br>\n                    Restores 20 MP each<br>\n                    Price: 100 Gold<br>\n                    <button class=\"action-btn\" style=\"padding: 5px 10px; margin-top: 5px;\" id=\"buyMpPotionPackBtn\">Buy</button>\n                </div>\n                <div class=\"shop-item\">\n                    <strong>Basic Weapon</strong><br>\n                    +3 STR<br>\n                    Price: 200 Gold<br>\n                    <button class=\"action-btn\" style=\"padding: 5px 10px; margin-top: 5px;\" id=\"buyWeaponBtn\">Buy</button>\n                </div>\n                <div class=\"shop-item\">\n                    <strong>Basic Armor</strong><br>\n                    +3 VIT<br>\n                    Price: 200 Gold<br>\n                    <button class=\"action-btn\" style=\"padding: 5px 10px; margin-top: 5px;\" id=\"buyArmorBtn\">Buy</button>\n                </div>\n                <div class=\"shop-item\">\n                    <strong>Skill Book</strong><br>\n                    Unlock Shadow Step<br>\n                    Price: 500 Gold<br>\n                    <button class=\"action-btn\" style=\"padding: 5px 10px; margin-top: 5px;\" id=\"buySkillBookBtn\">Buy</button>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"modal\" id=\"skillsModal\">\n        <div class=\"modal-content\">\n            <span class=\"close-modal\">&times;</span>\n            <h2>SHADOW MONARCH SKILLS</h2>\n            <div class=\"skill-tree\">\n                <div class=\"skill-node locked\" data-skill=\"shadow-step\">\n                    <strong>Shadow Step</strong><br>\n                    (Locked)<br>\n                    Cost: 2 Skill Points\n                </div>\n                <div class=\"skill-node locked\" data-skill=\"dark-vision\">\n                    <strong>Dark Vision</strong><br>\n                    (Locked)<br>\n                    Cost: 1 Skill Points\n                </div>\n                <div class=\"skill-node locked\" data-skill=\"summon-shadow\">\n                    <strong>Summon Shadow</strong><br>\n                    (Locked)<br>\n                    Cost: 5 Skill Points\n                </div>\n            </div>\n            <div style=\"margin-top: 20px;\">\n                <p>Available Skill Points: <span id=\"skillPoints\">0</span></p>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        // Enhanced Game State\n        const state = {\n            level: 1,\n            exp: 0,\n            maxExp: 100,\n            str: 5,\n            agi: 5,\n            vit: 5,\n            int: 5,\n            hp: 100,\n            maxHp: 100,\n            mp: 50,\n            maxMp: 50,\n            stamina: 100,\n            points: 0,\n            gold: 100,\n            dailyQuests: 0,\n            dungeonLevel: 1,\n            status: 'Normal',\n            inventory: Array(8).fill({name: '', type: ''}),\n            achievements: {\n                firstKill: false,\n                level10: false,\n                questMaster: false,\n                dungeonExplorer: false\n            },\n            skills: {\n                shadowStep: false,\n                darkVision: false,\n                summonShadow: false\n            },\n            skillPoints: 0,\n            statsMultiplier: 1,\n            enemiesDefeated: 0,\n            questsCompleted: 0,\n            totalDamageTaken: 0,\n            totalHealing: 0,\n            playTime: 0\n        };\n\n        // Game Settings\n        const settings = {\n            expScale: 1.5,\n            dungeonExpMultiplier: 1.5,\n            rareDropChance: 0.2,\n            criticalHitChance: 0.1,\n            criticalDamageMultiplier: 1.5,\n            shopPrices: {\n                healthPotion: 50,\n                manaPotion: 40,\n                staminaElixir: 60,\n                healthPotionPack: 120,\n                manaPotionPack: 100,\n                basicWeapon: 200,\n                basicArmor: 200,\n                skillBook: 500\n            }\n        };\n\n        // DOM Elements\n        const elements = {\n            // Stats\n            level: document.getElementById('level'),\n            currentExp: document.getElementById('currentExp'),\n            maxExp: document.getElementById('maxExp'),\n            expBar: document.getElementById('expBar'),\n            hp: document.getElementById('hp'),\n            maxHp: document.getElementById('maxHp'),\n            hpBar: document.getElementById('hpBar'),\n            mp: document.getElementById('mp'),\n            maxMp: document.getElementById('maxMp'),\n            mpBar: document.getElementById('mpBar'),\n            stamina: document.getElementById('stamina'),\n            staminaBar: document.getElementById('staminaBar'),\n            str: document.getElementById('str'),\n            agi: document.getElementById('agi'),\n            vit: document.getElementById('vit'),\n            int: document.getElementById('int'),\n            points: document.getElementById('points'),\n            gold: document.getElementById('gold'),\n            dailyQuests: document.getElementById('dailyQuests'),\n            dungeonLevel: document.getElementById('dungeonLevel'),\n            skillPoints: document.getElementById('skillPoints'),\n            \n            // Actions\n            trainBtn: document.getElementById('trainBtn'),\n            huntBtn: document.getElementById('huntBtn'),\n            questBtn: document.getElementById('questBtn'),\n            restBtn: document.getElementById('restBtn'),\n            upgradeBtn: document.getElementById('upgradeBtn'),\n            dungeonBtn: document.getElementById('dungeonBtn'),\n            shopBtn: document.getElementById('shopBtn'),\n            skillsBtn: document.getElementById('skillsBtn'),\n            \n            // Shop\n            buyHpPotionBtn: document.getElementById('buyHpPotionBtn'),\n            buyMpPotionBtn: document.getElementById('buyMpPotionBtn'),\n            buyStaminaPotionBtn: document.getElementById('buyStaminaPotionBtn'),\n            modalGold: document.getElementById('modalGold'),\n            buyHpPotionPackBtn: document.getElementById('buyHpPotionPackBtn'),\n            buyMpPotionPackBtn: document.getElementById('buyMpPotionPackBtn'),\n            buyWeaponBtn: document.getElementById('buyWeaponBtn'),\n            buyArmorBtn: document.getElementById('buyArmorBtn'),\n            buySkillBookBtn: document.getElementById('buySkillBookBtn'),\n            \n            // UI\n            log: document.getElementById('log'),\n            inventory: document.getElementById('inventory'),\n            achievementsList: document.getElementById('achievementsList'),\n            shopModal: document.getElementById('shopModal'),\n            skillsModal: document.getElementById('skillsModal')\n        };\n\n        // Modals\n        const modals = {\n            shop: {\n                element: elements.shopModal,\n                close: elements.shopModal.querySelector('.close-modal')\n            },\n            skills: {\n                element: elements.skillsModal,\n                close: elements.skillsModal.querySelector('.close-modal')\n            }\n        };\n\n        // Initialize modals\n        Object.values(modals).forEach(modal => {\n            modal.close.addEventListener('click', () => {\n                modal.element.style.display = 'none';\n            });\n        });\n\n        // Open modals\n        elements.shopBtn.addEventListener('click', () => {\n            elements.modalGold.textContent = state.gold;\n            modals.shop.element.style.display = 'flex';\n        });\n\n        elements.skillsBtn.addEventListener('click', () => {\n            elements.skillPoints.textContent = state.skillPoints;\n            modals.skills.element.style.display = 'flex';\n        });\n\n        // Tab system\n        document.querySelectorAll('.tab').forEach(tab => {\n            tab.addEventListener('click', () => {\n                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));\n                document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));\n                \n                tab.classList.add('active');\n                document.getElementById(tab.dataset.tab + 'Tab').classList.add('active');\n            });\n        });\n\n        // Update UI\n        function updateUI() {\n            // Update stats\n            elements.level.textContent = state.level;\n            elements.currentExp.textContent = state.exp;\n            elements.maxExp.textContent = state.maxExp;\n            elements.expBar.value = state.exp;\n            elements.expBar.max = state.maxExp;\n            elements.hp.textContent = state.hp;\n            elements.maxHp.textContent = state.maxHp;\n            elements.hpBar.value = state.hp;\n            elements.hpBar.max = state.maxHp;\n            elements.mp.textContent = state.mp;\n            elements.maxMp.textContent = state.maxMp;\n            elements.mpBar.value = state.mp;\n            elements.mpBar.max = state.maxMp;\n            elements.stamina.textContent = state.stamina;\n            elements.staminaBar.value = state.stamina;\n            elements.str.textContent = state.str;\n            elements.agi.textContent = state.agi;\n            elements.vit.textContent = state.vit;\n            elements.int.textContent = state.int;\n            elements.points.textContent = state.points;\n            elements.gold.textContent = state.gold;\n            elements.dailyQuests.textContent = state.dailyQuests;\n            elements.dungeonLevel.textContent = state.dungeonLevel;\n            elements.skillPoints.textContent = state.skillPoints;\n            \n            // Update buttons based on available resources\n            elements.trainBtn.disabled = state.stamina < 10;\n            elements.huntBtn.disabled = state.stamina < 20;\n            elements.questBtn.disabled = state.stamina < 30 || state.dailyQuests >= 3;\n            elements.upgradeBtn.disabled = state.points < 10;\n            elements.dungeonBtn.disabled = state.stamina < 40;\n            \n            // Update shop buttons\n            elements.buyHpPotionBtn.disabled = state.gold < settings.shopPrices.healthPotion;\n            elements.buyMpPotionBtn.disabled = state.gold < settings.shopPrices.manaPotion;\n            elements.buyStaminaPotionBtn.disabled = state.gold < settings.shopPrices.staminaElixir;\n            \n            // Update achievements\n            updateAchievementsUI();\n        }\n\n        function updateAchievementsUI() {\n            const achievementsList = elements.achievementsList;\n            \n            // First achievement - First Kill\n            achievementsList.children[0].className = state.achievements.firstKill ? \n                'achievement unlocked' : 'achievement locked';\n            achievementsList.children[0].querySelector('.achievement-icon').textContent = \n                state.achievements.firstKill ? '🏆' : '🔒';\n                \n            // Second achievement - Level 10\n            achievementsList.children[1].className = state.achievements.level10 ? \n                'achievement unlocked' : 'achievement locked';\n            achievementsList.children[1].querySelector('.achievement-icon').textContent = \n                state.achievements.level10 ? '🏆' : '🔒';\n                \n            // Third achievement - Quest Master\n            achievementsList.children[2].className = state.achievements.questMaster ? \n                'achievement unlocked' : 'achievement locked';\n            achievementsList.children[2].querySelector('.achievement-icon').textContent = \n                state.achievements.questMaster ? '🏆' : '🔒';\n        }\n\n        // Add log entry\n        function addLog(message, type = 'normal') {\n            const entry = document.createElement('div');\n            entry.className = `log-entry ${type}`;\n            entry.textContent = message;\n            elements.log.appendChild(entry);\n            elements.log.scrollTop = elements.log.scrollHeight;\n        }\n\n        // Gain EXP\n        function gainExp(amount, source = '') {\n            const multiplier = source === 'dungeon' ? settings.dungeonExpMultiplier : 1;\n            const finalAmount = Math.floor(amount * multiplier * state.statsMultiplier);\n            \n            state.exp += finalAmount;\n            addLog(`+${finalAmount} EXP${source ? ` (${source})` : ''}`);\n            \n            // Check for level up\n            if (state.exp >= state.maxExp) {\n                levelUp();\n            }\n            \n            updateUI();\n        }\n\n        // Level up\n        function levelUp() {\n            state.level++;\n            state.exp -= state.maxExp;\n            state.maxExp = Math.floor(state.maxExp * settings.expScale);\n            state.points += 5;\n            \n            // Increase base stats\n            state.str += Math.floor(1 * state.statsMultiplier);\n            state.agi += Math.floor(1 * state.statsMultiplier);\n            state.vit += Math.floor(1 * state.statsMultiplier);\n            state.int += Math.floor(1 * state.statsMultiplier);\n            \n            // Increase HP/MP\n            state.maxHp += Math.floor(10 * state.statsMultiplier);\n            state.hp = state.maxHp;\n            state.maxMp += Math.floor(5 * state.statsMultiplier);\n            state.mp = state.maxMp;\n            \n            // Every 5 levels, gain bonus multipliers\n            if (state.level % 5 === 0) {\n                state.statsMultiplier += 0.1;\n                addLog(`Stats growth rate increased by 10%!`, 'level-up');\n            }\n            \n            // Every 10 levels, gain a skill point\n            if (state.level % 10 === 0) {\n                state.skillPoints++;\n                addLog(`Gained 1 Skill Point!`, 'level-up');\n            }\n            \n            addLog(`LEVEL UP! Now Level ${state.level}. +5 Stat Points.`, 'level-up');\n            \n            // Check for level 10 achievement\n            if (state.level >= 10 && !state.achievements.level10) {\n                state.achievements.level10 = true;\n                addLog('Achievement Unlocked: Level 10!', 'rare');\n            }\n            \n            updateUI();\n        }\n\n        // Take damage\n        function takeDamage(amount) {\n            const damageReduction = Math.floor(state.vit / 5);\n            const finalDamage = Math.max(1, amount - damageReduction);\n            \n            state.hp = Math.max(0, state.hp - finalDamage);\n            state.totalDamageTaken += finalDamage;\n            \n            addLog(`You took ${finalDamage} damage${damageReduction > 0 ? ` (Reduced by ${damageReduction})` : ''}!`, 'danger');\n            \n            if (state.hp <= 0) {\n                state.hp = 1;\n                state.stamina = 0;\n                addLog('You are critically wounded! Must rest to recover.', 'danger');\n            }\n            \n            updateUI();\n        }\n\n        // Heal\n        function heal(amount) {\n            state.hp = Math.min(state.maxHp, state.hp + amount);\n            updateUI();\n        }\n\n        // Restore MP\n        function restoreMp(amount) {\n            state.mp = Math.min(state.maxMp, state.mp + amount);\n            updateUI();\n        }\n\n        // Restore Stamina\n        function restoreStamina(amount) {\n            state.stamina = Math.min(100, state.stamina + amount);\n            updateUI();\n        }\n\n        // Random reward system\n        function getRandomReward(baseAmount, variance) {\n            const randomFactor = 1 + (Math.random() * variance * 2 - variance);\n            return Math.floor(baseAmount * randomFactor);\n        }\n\n        // Check for critical hit\n        function checkCritical() {\n            const critChance = state.skills.darkVision ? \n                settings.criticalHitChance * 1.5 : \n                settings.criticalHitChance;\n            \n            return Math.random() < critChance;\n        }\n\n        // Combat mechanics\n        function calculateDamage() {\n            const baseDamage = Math.floor(state.str / 2);\n            const isCritical = checkCritical();\n            \n            if (isCritical) {\n                return Math.floor(baseDamage * settings.criticalDamageMultiplier);\n            }\n            return baseDamage;\n        }\n\n        // Training action\n        elements.trainBtn.addEventListener('click', () => {\n            state.stamina -= 10;\n            \n            const expGain = getRandomReward(10, 0.3);\n            gainExp(expGain);\n            \n            // Small chance to gain bonus stat\n            if (Math.random() < 0.1) {\n                const stat = ['str', 'agi', 'vit', 'int'][Math.floor(Math.random() * 4)];\n                state[stat] += 1;\n                addLog(`Intense training improved your ${stat.toUpperCase()}!`, 'success');\n            }\n            \n            addLog(`Training session completed (+${expGain} EXP).`);\n            \n            if (Math.random() < 0.05) {\n                const goldFound = Math.floor(Math.random() * 50) + 10;\n                state.gold += goldFound;\n                addLog(`Found ${goldFound} gold while training!`, 'rare');\n            }\n            \n            updateUI();\n        });\n\n        // Hunting action\n        elements.huntBtn.addEventListener('click', () => {\n            state.stamina -= 20;\n            \n            const expGain = getRandomReward(20, 0.4);\n            gainExp(expGain);\n            \n            const damageReceived = Math.floor(Math.random() * 15) + 5;\n            takeDamage(damageReceived);\n            \n            const goldGain = Math.floor(Math.random() * 30) + 10;\n            state.gold += goldGain;\n            \n            state.enemiesDefeated++;\n            addLog(`Defeated a monster (+${expGain} EXP, +${goldGain} gold).`, 'normal');\n            \n            // Check for first kill achievement\n            if (state.enemiesDefeated === 1 && !state.achievements.firstKill) {\n                state.achievements.firstKill = true;\n                addLog('Achievement Unlocked: First Kill!', 'rare');\n            }\n            \n            // Rare drop chance\n            if (Math.random() < settings.rareDropChance) {\n                const rareItems = ['Ancient Coin', 'Monster Core', 'Rare Herb'];\n                const item = rareItems[Math.floor(Math.random() * rareItems.length)];\n                \n                // Add to inventory if there's space\n                const emptySlot = state.inventory.findIndex(slot => !slot.name);\n                if (emptySlot !== -1) {\n                    state.inventory[emptySlot] = {name: item, type: 'material'};\n                    addLog(`Found rare item: ${item}!`, 'rare');\n                } else {\n                    addLog(`Found ${item} but inventory is full!`, 'warning');\n                }\n            }\n            \n            if (state.dailyQuests < 3) {\n                // Update quest progress if active\n                const questEntry = Array.from(elements.log.children).find(child => \n                    child.textContent.includes('Daily Quest Available'));\n                \n                if (questEntry) {\n                    questEntry.textContent = questEntry.textContent.replace(\n                        'Daily Quest Available', 'Daily Quest Progress');\n                }\n            }\n            \n            updateUI();\n        });\n\n        // Quest action\n        elements.questBtn.addEventListener('click', () => {\n            state.stamina -= 30;\n            \n            const expGain = getRandomReward(80, 0.5);\n            gainExp(expGain, 'quest');\n            \n            state.points += 2;\n            state.gold += Math.floor(Math.random() * 100) + 50;\n            \n            state.dailyQuests++;\n            state.questsCompleted++;\n            \n            // Random stat bonus from quest completion\n            const statBonus = ['str', 'agi', 'vit', 'int'][Math.floor(Math.random() * 4)];\n            state[statBonus] += 1;\n            \n            addLog(`Daily Quest completed! +${expGain} EXP, +2 Points, +1 ${statBonus.toUpperCase()}!`, 'quest');\n            \n            if (state.dailyQuests >= 3) {\n                addLog(\"All daily quests completed for today!\", 'quest');\n                \n                // Check for quest master achievement\n                if (state.questsCompleted >= 10 && !state.achievements.questMaster) {\n                    state.achievements.questMaster = true;\n                    addLog('Achievement Unlocked: Quest Master!', 'rare');\n                }\n            }\n            \n            updateUI();\n        });\n\n        // Rest action\n        elements.restBtn.addEventListener('click', () => {\n            const hpRecovered = Math.floor(state.maxHp * 0.5);\n            const mpRecovered = Math.floor(state.maxMp * 0.5);\n            \n            heal(hpRecovered);\n            restoreMp(mpRecovered);\n            restoreStamina(50);\n            \n            addLog(`Rested and recovered ${hpRecovered} HP, ${mpRecovered} MP and 50 Stamina.`);\n            \n            // Reset daily quests (new day)\n            if (state.dailyQuests >= 3) {\n                state.dailyQuests = 0;\n                addLog(\"New day begins. Daily quests refreshed!\", 'quest');\n            }\n            \n            updateUI();\n        });\n\n        // Upgrade stats action\n        elements.upgradeBtn.addEventListener('click', () => {\n            state.points -= 10;\n            \n            // Weighted random selection - higher chance for stats that are lagging behind\n            const stats = ['str', 'agi', 'vit', 'int'];\n            const statAvg = (state.str + state.agi + state.vit + state.int) / 4;\n            const weights = stats.map(stat => statAvg - state[stat]);\n            \n            // Ensure no negative weights\n            const adjustedWeights = weights.map(w => Math.max(1, w));\n            const totalWeight = adjustedWeights.reduce((a, b) => a + b, 0);\n            \n            let random = Math.random() * totalWeight;\n            let selectedStat = 0;\n            for (let i = 0; i < adjustedWeights.length; i++) {\n                if (random < adjustedWeights[i]) {\n                    selectedStat = i;\n                    break;\n                }\n                random -= adjustedWeights[i];\n            }\n            \n            const statName = stats[selectedStat];\n            state[statName] += 2;\n            \n            addLog(`Used 10 Points to upgrade ${statName.toUpperCase()} by 2!`);\n            updateUI();\n        });\n\n        // Dungeon action\n        elements.dungeonBtn.addEventListener('click', () => {\n            state.stamina -= 40;\n            \n            // Higher risk, higher reward\n            const baseExp = 60 + (state.dungeonLevel * 10);\n            const expGain = getRandomReward(baseExp, 0.5);\n            gainExp(expGain, 'dungeon');\n            \n            const damageReceived = Math.floor(Math.random() * 25) + 10;\n            takeDamage(damageReceived);\n            \n            const goldGain = Math.floor(Math.random() * 100) + 50;\n            state.gold += goldGain;\n            \n            // Progress dungeon level\n            if (Math.random() < 0.3) {\n                state.dungeonLevel++;\n                addLog(`Advanced to Dungeon Level ${state.dungeonLevel}!`, 'level-up');\n                \n                if (state.dungeonLevel === 5 && !state.achievements.dungeonExplorer) {\n                    state.achievements.dungeonExplorer = true;\n                    addLog('Achievement Unlocked: Dungeon Explorer!', 'rare');\n                }\n            }\n            \n            addLog(`Completed dungeon run (+${expGain} EXP, +${goldGain} gold).`, 'normal');\n            \n            // Higher chance for rare drops in dungeons\n            if (Math.random",
    "loading": true
  }
];